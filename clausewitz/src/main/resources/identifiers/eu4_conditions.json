{
    "<advisor>": {
        "id": "<advisor>",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has hired an advisor of the specified type which has at least level X.",
                "scope": "Country",
                "example": "statesman = 3"
            }
        ],
        "macro": [
            "advisor"
        ]
    },
    "<building>": {
        "id": "<building>",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X buildings from the specified building type.",
                "scope": "Country",
                "example": "temple = 3"
            }
        ],
        "macro": [
            "building"
        ]
    },
    "<idea_group>": {
        "id": "<idea_group>",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X ideas from the specified idea group.",
                "scope": "Country",
                "example": "religious_ideas = 3"
            }
        ],
        "macro": [
            "idea_group"
        ]
    },
    "<institution>": {
        "id": "<institution>",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the support for the specified institution in the province is at least X.",
                "scope": "Province",
                "example": "printing_press = 50"
            }
        ],
        "macro": [
            "institution"
        ]
    },
    "<religion>": {
        "id": "<religion>",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a tolerance of at least X of the specified religion.\nNote: No correct localisation.",
                "scope": "Country",
                "example": "orthodox = -2"
            }
        ],
        "macro": [
            "religion"
        ]
    },
    "<subject_type>": {
        "id": "<subject_type>",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X subjects of the given type.",
                "scope": "Country",
                "example": "vassal = 3"
            }
        ],
        "macro": [
            "subject_type"
        ]
    },
    "<trade_good>": {
        "id": "<trade_good>",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X provinces producing the specified trade good.",
                "scope": "Country",
                "example": "gold = 2"
            }
        ],
        "macro": [
            "trade_good"
        ]
    },
    "absolutism": {
        "id": "absolutism",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X absolutism.",
                "scope": "Country",
                "example": "absolutism = 50"
            }
        ],
        "macro": []
    },
    "accepted_culture": {
        "id": "accepted_culture",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country accepts the specified culture.",
                "scope": "Country",
                "example": "accepted_culture = ROOT"
            },
            {
                "type": "ProvinceScope",
                "description": "Returns true if the country accepts the specified culture.",
                "scope": "Country",
                "example": "accepted_culture = ROOT"
            }
        ],
        "macro": []
    },
    "active_major_mission": {
        "id": "active_major_mission",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if X is the current mission ot the country.",
                "scope": "Country",
                "example": "active_major_mission = finish_reconquista"
            }
        ],
        "macro": []
    },
    "adm": {
        "id": "adm",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a ruler with an administrative skill of at least X.",
                "scope": "Country",
                "example": "adm = 3"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has a ruler with at least as high administrative skill as the ruler of the specified country.",
                "scope": "Country",
                "example": "adm = GEO"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has a ruler with at least as high administrative skill as the ruler of the specified country.",
                "scope": "Country",
                "example": "adm = GEO"
            }
        ],
        "macro": []
    },
    "adm_power": {
        "id": "adm_power",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X administrative power.",
                "scope": "Country",
                "example": "adm_power = 600"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much administrative power than the specified country.",
                "scope": "Country",
                "example": "adm_power = FIN"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much administrative power than the specified country.",
                "scope": "Country",
                "example": "adm_power = FIN"
            }
        ],
        "macro": []
    },
    "adm_tech": {
        "id": "adm_tech",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an administrative technology of at least X.",
                "scope": "Country",
                "example": "adm_tech = 4"
            }
        ],
        "macro": []
    },
    "advisor": {
        "id": "advisor",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has an advisor of the specified type.",
                "scope": "Country",
                "example": "advisor = trader"
            }
        ],
        "macro": []
    },
    "advisor_exists": {
        "id": "advisor_exists",
        "value_types": [
            {
                "type": "AdvisorId[1]",
                "description": "Returns true if the advisor X exists.",
                "scope": "Country",
                "example": "advisor_exists = 225"
            }
        ],
        "macro": []
    },
    "ai": {
        "id": "ai",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is controlled by the AI.",
                "scope": "Country",
                "example": "ai = yes"
            }
        ],
        "macro": []
    },
    "ai_attitude": {
        "id": "ai_attitude",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has the specified attitude towards country X.",
                "scope": "Country",
                "example": "ai_attitude = {\n who = FROM\n attitude = attitude_hostile\n}"
            }
        ],
        "macro": []
    },
    "alliance_with": {
        "id": "alliance_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country has an alliance with X.",
                "scope": "Country",
                "example": "alliance_with = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has an alliance with X.",
                "scope": "Country",
                "example": "alliance_with = FRA"
            }
        ],
        "macro": []
    },
    "allows_female_emperor": {
        "id": "allows_female_emperor",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if females can become emperor.",
                "scope": "Anywhere",
                "example": "allows_female_emperor = no"
            }
        ],
        "macro": []
    },
    "always": {
        "id": "always",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true under all circumstances if set to yes, returns false under all circumstances if set to no.",
                "scope": "Anywhere",
                "example": "always = no"
            }
        ],
        "macro": []
    },
    "area": {
        "id": "area",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province is part of the area X.",
                "scope": "Province",
                "example": "area = amazon_area"
            }
        ],
        "macro": []
    },
    "army_size": {
        "id": "army_size",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an army of at least X k soldiers.",
                "scope": "Country",
                "example": "army_size = 15"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has an army with at least as much soldiers than the specified country.",
                "scope": "Country",
                "example": "army_size = SPA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has an army with at least as much soldiers than the specified country.",
                "scope": "Country",
                "example": "army_size = SPA"
            }
        ],
        "macro": []
    },
    "army_size_percentage": {
        "id": "army_size_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the total army size of the country is at least X% of its land force limit.",
                "scope": "Country",
                "example": "army_size_percentage = 0.6"
            }
        ],
        "macro": []
    },
    "army_strength": {
        "id": "army_strength",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true, if the country's army size is at least the size of X times the army size of the specified country.",
                "scope": "Country",
                "example": "army_strength = {\n who = FRA\n value = 0.66\n}"
            }
        ],
        "macro": []
    },
    "army_professionalism": {
        "id": "army_professionalism",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country's army professionalism is of at least X.",
                "scope": "Country",
                "example": "army_professionalism = 0.10"
            }
        ],
        "macro": []
    },
    "army_tradition": {
        "id": "army_tradition",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an army tradition of at least X.",
                "scope": "Country",
                "example": "army_tradition = 75"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has an at least as high army tradition as the specified country.",
                "scope": "Country",
                "example": "army_tradition = RUS"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has an at least as high army tradition as the specified country.",
                "scope": "Country",
                "example": "army_tradition = RUS"
            }
        ],
        "macro": []
    },
    "artillery_fraction": {
        "id": "artillery_fraction",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of the artillery fraction to the army size of the country is at least X.",
                "scope": "Country",
                "example": "artillery_fraction = 0.6"
            }
        ],
        "macro": []
    },
    "artillery_in_province": {
        "id": "artillery_in_province",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X artillery units in the province.",
                "scope": "Province",
                "example": "artillery_in_province = 5"
            },
            {
                "type": "Tag",
                "description": "Returns true if there are artillery units from the specified country in the province.",
                "scope": "Province",
                "example": "artillery_in_province = OMA"
            },
            {
                "type": "Scope",
                "description": "Returns true if there are artillery units from the specified country in the province.",
                "scope": "Province",
                "example": "artillery_in_province = OMA"
            }
        ],
        "macro": []
    },
    "at_war_with_religious_enemy": {
        "id": "at_war_with_religious_enemy",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is at war with any country of a different religion.",
                "scope": "Country",
                "example": "at_war_with_religious_enemy = yes"
            }
        ],
        "macro": []
    },
    "authority": {
        "id": "authority",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the Inti country has at least X authority.",
                "scope": "Country",
                "example": "authority = 5"
            },
            {
                "type": "Tag",
                "description": "Returns true if the Inti country has at least as much authority as the specified country.",
                "scope": "Country",
                "example": "authority = MCA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the Inti country has at least as much authority as the specified country.",
                "scope": "Country",
                "example": "authority = MCA"
            }
        ],
        "macro": []
    },
    "average_autonomy": {
        "id": "average_autonomy",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an average autonomy in its provinces of at least X.",
                "scope": "Country",
                "example": "average_autonomy = 5"
            }
        ],
        "macro": []
    },
    "average_autonomy_above_min": {
        "id": "average_autonomy_above_min",
        "value_types": [
            {
                "type": "Integer",
                "description": "[Needs description]",
                "scope": "Country",
                "example": "average_autonomy_above_min = 40"
            }
        ],
        "macro": []
    },
    "average_effective_unrest": {
        "id": "average_effective_unrest",
        "value_types": [
            {
                "type": "Integer",
                "description": "[Needs description]",
                "scope": "Country",
                "example": "average_effective_unrest = 2"
            }
        ],
        "macro": []
    },
    "average_home_autonomy": {
        "id": "average_home_autonomy",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an average autonomy in its provinces excluding overseas provinces is at least X.",
                "scope": "Country",
                "example": "average_home_autonomy = 5"
            }
        ],
        "macro": []
    },
    "average_unrest": {
        "id": "average_unrest",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an average unrest in its provinces of at least X.",
                "scope": "Country",
                "example": "average_unrest = 2"
            }
        ],
        "macro": []
    },
    "base_manpower": {
        "id": "base_manpower",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the base manpower of the province is at least X.",
                "scope": "Province",
                "example": "base_manpower = 3"
            }
        ],
        "macro": []
    },
    "base_production": {
        "id": "base_production",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the base production of the province is at least X.",
                "scope": "Province",
                "example": "base_production = 5"
            }
        ],
        "macro": []
    },
    "base_tax": {
        "id": "base_tax",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the base tax of the province is at least X.",
                "scope": "Province",
                "example": "base_tax = 5"
            }
        ],
        "macro": []
    },
    "blockade": {
        "id": "blockade",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the blockade penalty of the country is at least X%.",
                "scope": "Country",
                "example": "blockade = 75"
            }
        ],
        "macro": []
    },
    "border_distance": {
        "id": "border_distance",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if distance between the borders of the countries is at least X.",
                "scope": "Country",
                "example": "border_distance = {\n who = FRA\n distance = 100\n}"
            }
        ],
        "macro": []
    },
    "calc_true_if": {
        "id": "calc_true_if",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if at least amount number of sub-conditions are true. Conditions can be listed explicitly as individual triggers or selected by an all_ scope.",
                "scope": "Anywhere",
                "example": "calc_true_if = {\n all_country = {\n  religion = protestant\n }\n amount = 10\n}"
            }
        ],
        "macro": []
    },
    "can_be_overlord": {
        "id": "can_be_overlord",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if country meets the conditions defined in the subject type's [i]is_potential_overlord[/i] section.",
                "scope": "Country",
                "example": "MNG = { can_be_overlord = tributary_state }"
            }
        ],
        "macro": []
    },
    "can_build": {
        "id": "can_build",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the specified building can be built in the province.",
                "scope": "Province",
                "example": "can_build = armory"
            }
        ],
        "macro": []
    },
    "can_create_vassals": {
        "id": "can_create_vassals",
        "value_types": [
            {
                "type": "Yes",
                "description": "Returns true if the country can create a vassal.\nWarning: Interprets anything after \u2018=\u2019 as \u201cyes\u201d.\nNote: Works only for independent countries.",
                "scope": "Country",
                "example": "can_create_vassals = yes"
            }
        ],
        "macro": []
    },
    "can_heir_be_child_of_consort": {
        "id": "can_heir_be_child_of_consort",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country\u2019s heir can potentially be the consort\u2019s child.",
                "scope": "Country",
                "example": "can_heir_be_child_of_consort = yes"
            }
        ],
        "macro": []
    },
    "can_justify_trade_conflict": {
        "id": "can_justify_trade_conflict",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country can justify a trade conflict against country X.",
                "scope": "Country",
                "example": "can_justify_trade_conflict = FROM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country can justify a trade conflict against country X.",
                "scope": "Country",
                "example": "can_justify_trade_conflict = FROM"
            }
        ],
        "macro": []
    },
    "can_migrate": {
        "id": "can_migrate",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country can migrate to another province. Doesn't return true if the timer is still counting down.",
                "scope": "Country",
                "example": "can_migrate = yes"
            }
        ],
        "macro": []
    },
    "can_spawn_rebels": {
        "id": "can_spawn_rebels",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the specified rebel faction is a valid rebel faction of the province.",
                "scope": "Province",
                "example": "can_spawn_rebels = catholic_rebels"
            }
        ],
        "macro": []
    },
    "capital": {
        "id": "capital",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true if the country's capital is the province with the ID X.",
                "scope": "Country",
                "example": "capital = 151"
            }
        ],
        "macro": []
    },
    "capital_distance": {
        "id": "capital_distance",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if distance between the capitals of the countries is at least X.",
                "scope": "Country",
                "example": "capital_distance = {\n who = FRA\n distance = 100\n}"
            }
        ],
        "macro": []
    },
    "cavalry_fraction": {
        "id": "cavalry_fraction",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of the cavalry fraction to the army size of the country is at least X.",
                "scope": "Country",
                "example": "cavalry_fraction = 0.5"
            }
        ],
        "macro": []
    },
    "cavalry_in_province": {
        "id": "cavalry_in_province",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X cavalry units in the province.",
                "scope": "Province",
                "example": "cavalry_in_province = 10"
            },
            {
                "type": "Tag",
                "description": "Returns true if there are cavalry units from the specified country in the province.",
                "scope": "Province",
                "example": "cavalry_in_province = ORI"
            },
            {
                "type": "Scope",
                "description": "Returns true if there are cavalry units from the specified country in the province.",
                "scope": "Province",
                "example": "cavalry_in_province = ORI"
            }
        ],
        "macro": []
    },
    "province_has_center_of_trade_of_level": {
        "id": "province_has_center_of_trade_of_level",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the province has a center of trade of at least this level.",
                "scope": "Province",
                "example": "province_has_center_of_trade_of_level = 2"
            }
        ],
        "macro": []
    },
    "check_variable": {
        "id": "check_variable",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the specified variable is at least X.",
                "scope": "",
                "example": "check_variable = {\n which = grand_embassy\n value = 6\n}"
            }
        ],
        "macro": []
    },
    "church_power": {
        "id": "church_power",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X church power.",
                "scope": "Country",
                "example": "church_power = 20"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much church power as the specified country.",
                "scope": "Country",
                "example": "church_power = SAX"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much church power as the specified country.",
                "scope": "Country",
                "example": "church_power = SAX"
            }
        ],
        "macro": []
    },
    "coalition_target": {
        "id": "coalition_target",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is the target of a coalition.",
                "scope": "Country",
                "example": "coalition_target = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is the target of a coalition.",
                "scope": "Country",
                "example": "coalition_target = FRA"
            }
        ],
        "macro": []
    },
    "colonial_claim_by_anyone_of_religion": {
        "id": "colonial_claim_by_anyone_of_religion",
        "value_types": [
            {
                "type": "[typeNeeded]",
                "description": "Returns true if ... has gotten a colonial grant for the scope's colonial region from any potential pope-like entities.",
                "scope": "[scope needed]",
                "example": "[example needed]"
            }
        ],
        "macro": []
    },
    "colonial_region": {
        "id": "colonial_region",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province is part of the colonial region X.",
                "scope": "Province",
                "example": "colonial_region = colonial_colombia"
            }
        ],
        "macro": []
    },
    "colony": {
        "id": "colony",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if country has at least that many colonial subjects.",
                "scope": "Country",
                "example": "colony = 5"
            }
        ],
        "macro": []
    },
    "colony_claim": {
        "id": "colony_claim",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if country has claim on colony",
                "scope": "Country",
                "example": "colony_claim = SPA"
            }
        ],
        "macro": []
    },
    "colonysize": {
        "id": "colonysize",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if colony is at least size X.",
                "scope": "Province",
                "example": "colonysize = 600"
            }
        ],
        "macro": []
    },
    "consort_adm": {
        "id": "consort_adm",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a consort with an administrative skill of at least X.",
                "scope": "Country",
                "example": "consort_adm = 5"
            }
        ],
        "macro": []
    },
    "consort_age": {
        "id": "consort_age",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country\u2019s consort has an age of at least X.",
                "scope": "Country",
                "example": "consort_age = 43"
            }
        ],
        "macro": []
    },
    "consort_dip": {
        "id": "consort_dip",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a consort with an diplomatic skill of at least X.",
                "scope": "Country",
                "example": "consort_dip = 5"
            }
        ],
        "macro": []
    },
    "consort_culture": {
        "id": "consort_culture",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country's consort has the specified culture. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "consort_culture = prussian"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country's consort has the specified culture. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "consort_culture = prussian"
            }
        ],
        "macro": []
    },
    "consort_has_personality": {
        "id": "consort_has_personality",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country\u2019s consort has the specified personality.",
                "scope": "Country",
                "example": "consort_has_personality = cruel_personality"
            }
        ],
        "macro": []
    },
    "consort_mil": {
        "id": "consort_mil",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a consort with an military skill of at least X.",
                "scope": "Country",
                "example": "consort_mil = 5"
            }
        ],
        "macro": []
    },
    "consort_religion": {
        "id": "consort_religion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country's consort has the specified religion. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "consort_religion = catholic"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country's consort has the specified religion. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "consort_religion = catholic"
            }
        ],
        "macro": []
    },
    "construction_progress": {
        "id": "construction_progress",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the construction progress is at least X%.",
                "scope": "Province",
                "example": "construction_progress = 0.5"
            }
        ],
        "macro": []
    },
    "continent": {
        "id": "continent",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province is located on continent X.",
                "scope": "Province",
                "example": "continent = north_america"
            }
        ],
        "macro": []
    },
    "controlled_by": {
        "id": "controlled_by",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the province is controlled by X.",
                "scope": "Province",
                "example": "controlled_by = TUR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province is controlled by X.",
                "scope": "Province",
                "example": "controlled_by = TUR"
            }
        ],
        "macro": []
    },
    "controls": {
        "id": "controls",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true if the province with id X is controlled by the country.",
                "scope": "Country",
                "example": "controls = 151"
            }
        ],
        "macro": []
    },
    "core_claim": {
        "id": "core_claim",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country has a core on any province owned by country X.",
                "scope": "Country",
                "example": "core_claim = FROM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has a core on any province owned by country X.",
                "scope": "Country",
                "example": "core_claim = FROM"
            }
        ],
        "macro": []
    },
    "core_percentage": {
        "id": "core_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has cored at least X% of its provinces.",
                "scope": "Country",
                "example": "core_percentage = 0.55"
            }
        ],
        "macro": []
    },
    "corruption": {
        "id": "corruption",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has a corruption of at least X.",
                "scope": "Country",
                "example": "corruption = 1"
            }
        ],
        "macro": []
    },
    "council_position": {
        "id": "council_position",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if X is the country's council position in the Council of Trent.",
                "scope": "Country",
                "example": "council_position = concilatory"
            }
        ],
        "macro": []
    },
    "country_or_non_sovereign_subject_holds": {
        "id": "country_or_non_sovereign_subject_holds",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the province is part of the specified country or its non-tributary subjects.",
                "scope": "Province",
                "example": "country_or_non_sovereign_subject_holds = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province is part of the specified country or its non-tributary subjects.",
                "scope": "Province",
                "example": "country_or_non_sovereign_subject_holds = ROOT"
            }
        ],
        "macro": []
    },
    "country_or_subject_holds": {
        "id": "country_or_subject_holds",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the province is part of the specified country or its subjects.\nThe old country_or_vassal_holds term maps to the new one for compatiblity.",
                "scope": "Province",
                "example": "country_or_subject_holds = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province is part of the specified country or its subjects.\nThe old country_or_vassal_holds term maps to the new one for compatiblity.",
                "scope": "Province",
                "example": "country_or_subject_holds = ROOT"
            }
        ],
        "macro": []
    },
    "culture": {
        "id": "culture",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province culture is X.",
                "scope": "Province",
                "example": "culture = basque"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province culture is X.",
                "scope": "Province",
                "example": "culture = basque"
            }
        ],
        "macro": []
    },
    "culture_group": {
        "id": "culture_group",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country/province has a culture of the specified culture group.",
                "scope": "Country\nProvince",
                "example": "culture_group = iberian"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country/province has a culture of the specified culture group.",
                "scope": "Country\nProvince",
                "example": "culture_group = iberian"
            }
        ],
        "macro": []
    },
    "culture_group_claim": {
        "id": "culture_group_claim",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if country's primary culture is the same culture group as any province owned by country X.",
                "scope": "Country",
                "example": "culture_group_claim = FROM"
            }
        ],
        "macro": []
    },
    "current_age": {
        "id": "current_age",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the current age is X.",
                "scope": "Anywhere",
                "example": "current_age = age_of_discovery"
            }
        ],
        "macro": []
    },
    "current_debate": {
        "id": "current_debate",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the parliament of the country debates about X.",
                "scope": "Country",
                "example": "current_debate = quartering_of_troops"
            }
        ],
        "macro": []
    },
    "current_icon": {
        "id": "current_icon",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country has the specified (orthodox) icon.",
                "scope": "Country",
                "example": "current_icon = icon_eleusa"
            }
        ],
        "macro": []
    },
    "current_income_balance": {
        "id": "current_income_balance",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the current income balance is X.",
                "scope": "Country",
                "example": "current_income_balance = 5"
            }
        ],
        "macro": []
    },
    "current_institution": {
        "id": "current_institution",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the current institution (technically the first unembraced meaning in case you have two unembraced, it would be the older one) progress is at least X",
                "scope": "Province",
                "example": "current_institution = 55"
            }
        ],
        "macro": []
    },
    "current_institution_growth": {
        "id": "current_institution_growth",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true, if the country/province has a annual (whereas monthly is printed in province screen) institution growth of at least X for the first not embraced institution.",
                "scope": "Country, Province",
                "example": "current_institution_growth = 12"
            }
        ],
        "macro": []
    },
    "current_size_of_parliament": {
        "id": "current_size_of_parliament",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the parliament of the country has a least X seats.",
                "scope": "Country",
                "example": "current_size_of_parliament = 20"
            }
        ],
        "macro": []
    },
    "custom_trigger_tooltip": {
        "id": "custom_trigger_tooltip",
        "value_types": [
            {
                "type": "Clause",
                "description": "Hides the enclosed condition so that it is still required but cannot be seen by human players and displays the specified tooltip in its place.",
                "scope": "Anywhere",
                "example": "custom_trigger_tooltip = {\n tooltip = EST_CRUSHED_NOMADIC_TRIBES\n NOT = { has_country_flag = nomadic_tribes_estate_in_power\n }\n}"
            }
        ],
        "macro": []
    },
    "defensive_war_with": {
        "id": "defensive_war_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is in a defensive war with country X.",
                "scope": "Country",
                "example": "defensive_war_with = TUR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is in a defensive war with country X.",
                "scope": "Country",
                "example": "defensive_war_with = TUR"
            }
        ],
        "macro": []
    },
    "devastation": {
        "id": "devastation",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the devastation of the province is at least X.",
                "scope": "Province",
                "example": "devastation = 1"
            }
        ],
        "macro": []
    },
    "development": {
        "id": "development",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the development of the province is at least X.",
                "scope": "Province",
                "example": "development = 9"
            }
        ],
        "macro": []
    },
    "development_in_provinces": {
        "id": "development_in_provinces",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true, if the owned provinces that fulfil the conditions have a total of X development",
                "scope": "Country",
                "example": "development_in_provinces = {\n value = 200\n region = korea_region\n}"
            }
        ],
        "macro": []
    },
    "development_of_overlord_fraction": {
        "id": "development_of_overlord_fraction",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true, if the country has X percent of its overlord's development",
                "scope": "Country",
                "example": "development_of_overlord_fraction = 0.33"
            }
        ],
        "macro": []
    },
    "devotion": {
        "id": "devotion",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X devotion.",
                "scope": "Country",
                "example": "devotion = 75"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much devotion as the specified country.",
                "scope": "Country",
                "example": "devotion = KOL"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much devotion as the specified country.",
                "scope": "Country",
                "example": "devotion = KOL"
            }
        ],
        "macro": []
    },
    "dip": {
        "id": "dip",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a ruler with a diplomatic skill of at least X.",
                "scope": "Country",
                "example": "dip = 6"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has a ruler with at least as high diplomatic skill as the ruler of the specified country.",
                "scope": "Country",
                "example": "dip = GRM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has a ruler with at least as high diplomatic skill as the ruler of the specified country.",
                "scope": "Country",
                "example": "dip = GRM"
            }
        ],
        "macro": []
    },
    "diplomatic_reputation": {
        "id": "diplomatic_reputation",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a diplomatic reputation of at least X.",
                "scope": "Country",
                "example": "diplomatic_reputation = 10"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much diplomatic reputation as the specified country.",
                "scope": "Country",
                "example": "diplomatic_reputation = CAS"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much diplomatic reputation as the specified country.",
                "scope": "Country",
                "example": "diplomatic_reputation = CAS"
            }
        ],
        "macro": []
    },
    "dip_power": {
        "id": "dip_power",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X diplomatic power.",
                "scope": "Country",
                "example": "dip_power = 600"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much diplomatic power than the specified country.",
                "scope": "Country",
                "example": "dip_power = TEU"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much diplomatic power than the specified country.",
                "scope": "Country",
                "example": "dip_power = TEU"
            }
        ],
        "macro": []
    },
    "dip_tech": {
        "id": "dip_tech",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an diplomatic technology of at least level X.",
                "scope": "Country",
                "example": "dip_tech = 4"
            }
        ],
        "macro": []
    },
    "dominant_culture": {
        "id": "dominant_culture",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the dominant culture in the country is X.",
                "scope": "Country",
                "example": "dominant_culture = turkish"
            },
            {
                "type": "Capital",
                "description": "Returns true if the dominant culture in the country is X.",
                "scope": "Country",
                "example": "dominant_culture = turkish"
            }
        ],
        "macro": []
    },
    "dominant_religion": {
        "id": "dominant_religion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the dominant religion in the country is X.",
                "scope": "Country",
                "example": "dominant_religion = catholic"
            },
            {
                "type": "Capital",
                "description": "Returns true if the dominant religion in the country is X.",
                "scope": "Country",
                "example": "dominant_religion = catholic"
            }
        ],
        "macro": []
    },
    "doom": {
        "id": "doom",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X doom.",
                "scope": "Country",
                "example": "doom = 30"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much doom than the specified country.",
                "scope": "Country",
                "example": "doom = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much doom than the specified country.",
                "scope": "Country",
                "example": "doom = ROOT"
            }
        ],
        "macro": []
    },
    "dynasty": {
        "id": "dynasty",
        "value_types": [
            {
                "type": "Name",
                "description": "Returns true if the ruling dynasty of the country is X.",
                "scope": "Country",
                "example": "dynasty = \"von Habsburg\""
            },
            {
                "type": "Tag",
                "description": "Returns true if both countries are ruled by the same dynasty.",
                "scope": "Country",
                "example": "dynasty = CAS"
            },
            {
                "type": "Scope",
                "description": "Returns true if both countries are ruled by the same dynasty.",
                "scope": "Country",
                "example": "dynasty = CAS"
            }
        ],
        "macro": []
    },
    "empire_of_china_reform_level[2]": {
        "id": "empire_of_china_reform_level[2]",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if at least X Empire of China reforms are enacted. Works similar to [i]hre_reform_level[/i]",
                "scope": "Anywhere",
                "example": "empire_of_china_reform_level = 3"
            }
        ],
        "macro": []
    },
    "employed_advisor": {
        "id": "employed_advisor",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has employed an advisor with the specified characteristics.\n(Any combinations of type, religion and culture are permitted.)",
                "scope": "Country",
                "example": "employed_advisor = {\n is_male = yes\n religion = reformed\n culture = basque\n type = treasurer\n}"
            }
        ],
        "macro": []
    },
    "estate_influence": {
        "id": "estate_influence",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the estate X in the country has at least Y influence.",
                "scope": "Country",
                "example": "estate_influence = {\n    estate = estate_church\n    influence = 80\n}"
            }
        ],
        "macro": []
    },
    "estate_loyalty": {
        "id": "estate_loyalty",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the estate X in the country has at least Y loyalty.",
                "scope": "Country",
                "example": "estate_loyalty = {\n    estate = estate_burghers\n    loyalty = 50\n}"
            }
        ],
        "macro": []
    },
    "estate_territory": {
        "id": "estate_territory",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the estate X in the country controls at least Y% of the total development.",
                "scope": "Country",
                "example": "estate_territory = {\n    estate = estate_nobles\n    territory = 12\n}"
            }
        ],
        "macro": []
    },
    "exists": {
        "id": "exists",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if country X exists.",
                "scope": "Anywhere",
                "example": "exists = MNG"
            },
            {
                "type": "Boolean",
                "description": "Returns true if the scoped country exists.",
                "scope": "Country",
                "example": "exists = yes"
            }
        ],
        "macro": []
    },
    "faction_in_power": {
        "id": "faction_in_power",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the faction in power of the country is X.",
                "scope": "Country",
                "example": "faction_in_power = eunuchs"
            }
        ],
        "macro": []
    },
    "faction_influence": {
        "id": "faction_influence",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the faction X of the country has at least Y influence.",
                "scope": "Country",
                "example": "faction_influence = {\n    faction =\n    influence =\n}"
            }
        ],
        "macro": []
    },
    "federation_size": {
        "id": "federation_size",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the federation with the country has at least X members.",
                "scope": "Country",
                "example": "federation_size = 5"
            }
        ],
        "macro": []
    },
    "fervor": {
        "id": "fervor",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has stored at least X fervor points.",
                "scope": "Country",
                "example": "fervor = 5"
            }
        ],
        "macro": []
    },
    "fort_level": {
        "id": "fort_level",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the fort in the province has at least level X.",
                "scope": "Province",
                "example": "fort_level = 1"
            }
        ],
        "macro": []
    },
    "full_idea_group": {
        "id": "full_idea_group",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has completed the X idea group.",
                "scope": "Country",
                "example": "full_idea_group = naval_ideas"
            }
        ],
        "macro": []
    },
    "galley_fraction": {
        "id": "galley_fraction",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of the galley fraction to the navy size of the country is at least X.",
                "scope": "Country",
                "example": "galley_fraction = 0.33"
            }
        ],
        "macro": []
    },
    "galleys_in_province": {
        "id": "galleys_in_province",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X galleys in the province.",
                "scope": "Province",
                "example": "galleys_in_province = 10"
            },
            {
                "type": "Tag",
                "description": "Returns true if there are galleys from the specified country in the province.",
                "scope": "Province",
                "example": "galleys_in_province = VEN"
            },
            {
                "type": "Scope",
                "description": "Returns true if there are galleys from the specified country in the province.",
                "scope": "Province",
                "example": "galleys_in_province = VEN"
            }
        ],
        "macro": []
    },
    "garrison": {
        "id": "garrison",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the garrison is at X men.\nNote: The localisation is misleading.",
                "scope": "Province",
                "example": "garrison = 1000"
            }
        ],
        "macro": []
    },
    "gold_income": {
        "id": "gold_income",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has an income from Gold of at least X.",
                "scope": "Country",
                "example": "gold_income = 6"
            }
        ],
        "macro": []
    },
    "gold_income_percentage": {
        "id": "gold_income_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if in the country the proportion of income from Gold is at least X.",
                "scope": "Country",
                "example": "gold_income_percentage = 0.1"
            }
        ],
        "macro": []
    },
    "government": {
        "id": "government",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has government type X.\nIdentifier: monarchy, republic, theocracy, tribal, native.",
                "scope": "Country",
                "example": "government = monarchy"
            }
        ],
        "macro": []
    },
    "government_rank": {
        "id": "government_rank",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a government rank of X or higher.",
                "scope": "Country",
                "example": "government_rank = 2"
            }
        ],
        "macro": []
    },
    "grown_by_development": {
        "id": "grown_by_development",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country's total development has grown by the specified amount",
                "scope": "Country",
                "example": "grown_by_development = 50"
            }
        ],
        "macro": []
    },
    "great_power_rank": {
        "id": "great_power_rank",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a great power rank of 2 or worse.",
                "scope": "Country",
                "example": "great_power_rank = 2"
            }
        ],
        "macro": []
    },
    "guaranteed_by": {
        "id": "guaranteed_by",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is guaranteed by X.",
                "scope": "Country",
                "example": "guaranteed_by = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is guaranteed by X.",
                "scope": "Country",
                "example": "guaranteed_by = ROOT"
            }
        ],
        "macro": []
    },
    "had_active_policy": {
        "id": "had_active_policy",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true, if the country still has and had the specified policy for at least X days.",
                "scope": "Country",
                "example": "had_active_policy = {\n policy = the_combination_act\n days = 365\n}"
            }
        ],
        "macro": []
    },
    "had_consort_flag": {
        "id": "had_consort_flag",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the consort flag X was last set at least Y days ago",
                "scope": "Country",
                "example": "had_consort_flag = {\n flag = my_first_consort_flag\n days = 365\n}"
            }
        ],
        "macro": []
    },
    "had_country_flag": {
        "id": "had_country_flag",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country flag X was last set for the country at least Y days ago.",
                "scope": "Country",
                "example": "had_country_flag = {\n flag = bur_successor\n days = 180\n}"
            }
        ],
        "macro": []
    },
    "had_global_flag": {
        "id": "had_global_flag",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the global flag X was last set at least Y days ago.",
                "scope": "Anywhere",
                "example": "had_global_flag = {\n flag = inc_smallpox\n days = 9125\n}"
            }
        ],
        "macro": []
    },
    "had_heir_flag": {
        "id": "had_heir_flag",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the heir flag X was last set at least Y days ago",
                "scope": "Country",
                "example": "had_heir_flag = {\n flag = inc_pacific_exploration\n days = 270\n}"
            }
        ],
        "macro": []
    },
    "had_province_flag": {
        "id": "had_province_flag",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the province flag X was last set for the province at least Y days ago.",
                "scope": "Province",
                "example": "had_province_flag = {\n flag = dutch_revolt\n days = 1825\n}"
            }
        ],
        "macro": []
    },
    "had_recent_war": {
        "id": "had_recent_war",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country fought a war within the last X years.",
                "scope": "Country",
                "example": "had_recent_war = 10"
            }
        ],
        "macro": []
    },
    "had_ruler_flag": {
        "id": "had_ruler_flag",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the ruler flag X was last set for the current ruler at least Y days ago",
                "scope": "Country",
                "example": "had_ruler_flag = {\n flag = helped_rival\n days = 730\n}"
            }
        ],
        "macro": []
    },
    "harmonization_progress": {
        "id": "harmonization_progress",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country's current harmonization progress is at least at X.",
                "scope": "Country",
                "example": "harmonization_progress = 90"
            }
        ],
        "macro": []
    },
    "harmony": {
        "id": "harmony",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has at least X harmony.",
                "scope": "Country",
                "example": "harmony = 50"
            }
        ],
        "macro": []
    },
    "has_active_debate": {
        "id": "has_active_debate",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has ongoing debate in parliament.",
                "scope": "Country",
                "example": "has_active_debate = yes"
            }
        ],
        "macro": []
    },
    "has_active_fervor": {
        "id": "has_active_fervor",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has activated a fervor effect.",
                "scope": "Country",
                "example": "has_active_fervor = no"
            }
        ],
        "macro": []
    },
    "has_active_policy": {
        "id": "has_active_policy",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if country has the specified policy active.",
                "scope": "Country",
                "example": "has_active_policy = noble_loyalty_act"
            }
        ],
        "macro": []
    },
    "has_active_triggered_province_modifier": {
        "id": "has_active_triggered_province_modifier",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if province has the specified triggered province modifier.",
                "scope": "Province",
                "example": "has_province_modifier = mongol_kurultai"
            }
        ],
        "macro": []
    },
    "has_adopted_cult": {
        "id": "has_adopted_cult",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has adopted the specified cult.",
                "scope": "Country",
                "example": "has_adopted_cult = roog_cult"
            }
        ],
        "macro": []
    },
    "has_advisor": {
        "id": "has_advisor",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has hired an advisor.\nWarning: Interprets every right side argument as yes.",
                "scope": "Country",
                "example": "has_advisor = yes"
            }
        ],
        "macro": []
    },
    "has_age_ability": {
        "id": "has_age_ability",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country has the specified age ability.",
                "scope": "Country",
                "example": "has_age_ability = ab_justified_wars"
            }
        ],
        "macro": []
    },
    "has_any_disaster": {
        "id": "has_any_disaster",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is currently in a disaster.",
                "scope": "Country",
                "example": "has_any_disaster = no"
            }
        ],
        "macro": []
    },
    "has_border_with_religious_enemy": {
        "id": "has_border_with_religious_enemy",
        "value_types": [
            {
                "type": "Yes",
                "description": "Returns true if the country borders any country of a different religion.\nWarning: Interprets anything after \u2018=\u2019 as \u201cyes\u201d.",
                "scope": "Country",
                "example": "has_border_with_religious_enemy = yes"
            }
        ],
        "macro": []
    },
    "has_building": {
        "id": "has_building",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if there is the specified building in the province.",
                "scope": "Province",
                "example": "has_building = fort_15th"
            }
        ],
        "macro": []
    },
    "has_cardinal": {
        "id": "has_cardinal",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province has a cardinal in the curia.",
                "scope": "Province",
                "example": "has_cardinal = yes"
            }
        ],
        "macro": []
    },
    "has_casus_belli": {
        "id": "has_casus_belli",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has a casus belli of type X against country Y.",
                "scope": "Country",
                "example": "has_casus_belli = {\n type = cb_trade_war_triggered\n target = TOT\n}"
            }
        ],
        "macro": []
    },
    "has_casus_belli_against": {
        "id": "has_casus_belli_against",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country has a casus belli against country X.",
                "scope": "Country",
                "example": "has_casus_belli_against = PREV"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has a casus belli against country X.",
                "scope": "Country",
                "example": "has_casus_belli_against = PREV"
            }
        ],
        "macro": []
    },
    "has_changed_nation": {
        "id": "has_changed_nation",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if playing as a released vassal.",
                "scope": "",
                "example": "has_changed_nation = yes"
            }
        ],
        "macro": []
    },
    "has_church_aspect": {
        "id": "has_church_aspect",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has enabled the church aspect X.",
                "scope": "Country",
                "example": "has_church_aspect = allow_usury_aspect"
            }
        ],
        "macro": []
    },
    "has_climate": {
        "id": "has_climate",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province has climate X.",
                "scope": "Province",
                "example": "has_climate = tropical"
            }
        ],
        "macro": []
    },
    "has_colonial_parent": {
        "id": "has_colonial_parent",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the specified country is the colonial parent of the country.",
                "scope": "Country",
                "example": "has_colonial_parent = GBR"
            }
        ],
        "macro": []
    },
    "has_colonist": {
        "id": "has_colonist",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if scoped province has an active colonist",
                "scope": "Province",
                "example": "has_colonist = yes"
            }
        ],
        "macro": []
    },
    "has_commanding_three_star": {
        "id": "has_commanding_three_star",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true, if country has a three star general.",
                "scope": "Country",
                "example": "has_commanding_three_star = yes"
            }
        ],
        "macro": []
    },
    "has_consort": {
        "id": "has_consort",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a consort.",
                "scope": "Country",
                "example": "has_consort = yes"
            }
        ],
        "macro": []
    },
    "has_consort_flag": {
        "id": "has_consort_flag",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the consort flag X is set.",
                "scope": "Country",
                "example": "has_consort_flag = royal_couple_shared_adm_interests"
            }
        ],
        "macro": []
    },
    "has_consort_regency": {
        "id": "has_consort_regency",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a consort regency.",
                "scope": "Country",
                "example": "has_consort_regency = yes"
            }
        ],
        "macro": []
    },
    "has_construction": {
        "id": "has_construction",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if there is the specified construction in progress in the province.\nPossible values are core, culture, building, merchant, diplomat, missionary, army, navy, canal, great_project etc.",
                "scope": "Province",
                "example": "has_construction = core"
            }
        ],
        "macro": []
    },
    "has_country_flag": {
        "id": "has_country_flag",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the flag X is set for the country.",
                "scope": "Country",
                "example": "has_country_flag = zan_shirazi_islam_confirmed"
            }
        ],
        "macro": []
    },
    "has_country_modifier": {
        "id": "has_country_modifier",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has the modifier X.",
                "scope": "Country",
                "example": "has_country_modifier = western_embassy_mission"
            }
        ],
        "macro": []
    },
    "has_custom_ideas": {
        "id": "has_custom_ideas",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has custom ideas.",
                "scope": "Country",
                "example": "has_custom_ideas = yes"
            }
        ],
        "macro": []
    },
    "has_disaster": {
        "id": "has_disaster",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country is currently in the disaster X.",
                "scope": "Country",
                "example": "has_disaster = time_of_troubles"
            }
        ],
        "macro": []
    },
    "has_disaster_progress": {
        "id": "has_disaster_progress",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the disaster progress of the specified disaster is at least X in the country.",
                "scope": "Country",
                "example": "has_disaster_progress = {\n disaster = time_of_troubles\n value = 50\n}"
            }
        ],
        "macro": []
    },
    "has_discovered": {
        "id": "has_discovered",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true if the country has discovered the province with the ID X.",
                "scope": "Country",
                "example": "has_discovered = 313"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has discovered the province with the ID X.",
                "scope": "Country",
                "example": "has_discovered = 313"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country X has discovered the province.",
                "scope": "Province",
                "example": "has_discovered = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country X has discovered the province.",
                "scope": "Province",
                "example": "has_discovered = ROOT"
            }
        ],
        "macro": []
    },
    "has_dlc": {
        "id": "has_dlc",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the DLC X is enabled.",
                "scope": "Anywhere",
                "example": "has_dlc = \"The Cossacks\""
            }
        ],
        "macro": []
    },
    "has_divert_trade": {
        "id": "has_divert_trade",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the protectorate has divert trade to its overlord.",
                "scope": "(Subject) Country",
                "example": "has_divert_trade = yes"
            }
        ],
        "macro": []
    },
    "has_embargo_rivals": {
        "id": "has_embargo_rivals",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the subject nation is embargoing overlord's rivals.",
                "scope": "(Subject) Country",
                "example": "has_embargo_rivals = no"
            }
        ],
        "macro": []
    },
    "has_empty_adjacent_province": {
        "id": "has_empty_adjacent_province",
        "value_types": [
            {
                "type": "Yes",
                "description": "Returns true if an adjacent province is uncolonized.\nWarning: Works only with 'yes'.",
                "scope": "Province",
                "example": "has_empty_adjacent_province = yes"
            }
        ],
        "macro": []
    },
    "has_estate": {
        "id": "has_estate",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is controlled by an estate.",
                "scope": "Province",
                "example": "has_estate = no"
            },
            {
                "type": "Identifier",
                "description": "Returns true if the province is controlled by the estate X.",
                "scope": "Province",
                "example": "has_estate = estate_church"
            }
        ],
        "macro": []
    },
    "has_estate_influence_modifier": {
        "id": "has_estate_influence_modifier",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the estate X in the country has the influence modifier Y.",
                "scope": "Country",
                "example": "has_estate_influence_modifier = {\n estate = estate_church\n modifier = EST_VAL_RELIGIOUS_ZEALOTS_TRIUMPH\n}"
            }
        ],
        "macro": []
    },
    "has_estate_loans": {
        "id": "has_estate_loans",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X estate loans.",
                "scope": "Country",
                "example": "has_estate_loans = 1"
            }
        ],
        "macro": []
    },
    "has_estate_loyalty_modifier": {
        "id": "has_estate_loyalty_modifier",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the estate X in the country has the loyalty modifier Y.",
                "scope": "Country",
                "example": "has_estate_loyalty_modifier = {\n    estate = estate_nobles\n    modifier = EST_VAL_NOT_LEGITIMATE\n}"
            }
        ],
        "macro": []
    },
    "has_faction": {
        "id": "has_faction",
        "value_types": [
            {
                "type": "Idenitifer",
                "description": "Returns true if the country has the specified faction.",
                "scope": "Country",
                "example": "has_faction = enuchs"
            }
        ],
        "macro": []
    },
    "has_factions": {
        "id": "has_factions",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if country has factions.",
                "scope": "Country",
                "example": "has_factions = yes"
            }
        ],
        "macro": []
    },
    "has_female_consort": {
        "id": "has_female_consort",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a female consort.",
                "scope": "Country",
                "example": "has_female_consort = yes"
            }
        ],
        "macro": []
    },
    "has_female_heir": {
        "id": "has_female_heir",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a female heir.",
                "scope": "Country",
                "example": "has_female_heir = yes"
            }
        ],
        "macro": []
    },
    "has_first_revolution_started": {
        "id": "has_first_revolution_started",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if a revolution has happened in the world.",
                "scope": "Anywhere",
                "example": "has_first_revolution_started = yes"
            }
        ],
        "macro": []
    },
    "has_foreign_consort": {
        "id": "has_foreign_consort",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has foreign consort.",
                "scope": "Country",
                "example": "has_foreign_consort = no"
            }
        ],
        "macro": []
    },
    "has_foreign_heir": {
        "id": "has_foreign_heir",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has foreign heir.",
                "scope": "Country",
                "example": "has_foreign_heir = no"
            }
        ],
        "macro": []
    },
    "has_friendly_reformation_center": {
        "id": "has_friendly_reformation_center",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a friendly center of reformation.",
                "scope": "Country",
                "example": "has_friendly_reformation_center = yes"
            }
        ],
        "macro": []
    },
    "has_game_started": {
        "id": "has_game_started",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the game has started.",
                "scope": "Clobal",
                "example": "has_game_started = no"
            }
        ],
        "macro": []
    },
    "has_given_consort_to": {
        "id": "has_given_consort_to",
        "value_types": [
            {
                "type": "Scope",
                "description": "Returns true if the scoped country has given a consort to the specified country.",
                "scope": "Country",
                "example": "has_given_consort_to = ROOT"
            },
            {
                "type": "Tag",
                "description": "Returns true if the scoped country has given a consort to the specified country.",
                "scope": "Country",
                "example": "has_given_consort_to = ROOT"
            }
        ],
        "macro": []
    },
    "has_great_project": {
        "id": "has_great_project",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has the specified great project.",
                "scope": "Province",
                "example": "has_great_project = kiel_canal"
            }
        ],
        "macro": []
    },
    "has_guaranteed": {
        "id": "has_guaranteed",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country has guaranteed country X.",
                "scope": "Country",
                "example": "has_guaranteed = TUR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has guaranteed country X.",
                "scope": "Country",
                "example": "has_guaranteed = TUR"
            }
        ],
        "macro": []
    },
    "has_global_flag": {
        "id": "has_global_flag",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the specified global flag is set.",
                "scope": "Anywhere",
                "example": "has_global_flag = japan_has_encountered_the_west"
            }
        ],
        "macro": []
    },
    "has_global_modifier_value": {
        "id": "has_global_modifier_value",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the value of the specified modifier is at least X for the country.",
                "scope": "Country",
                "example": "has_global_modifier_value = {\n which = cavalry_power\n value = 0.5\n}"
            }
        ],
        "macro": []
    },
    "has_government_mechanic": {
        "id": "has_government_mechanic",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country uses the specified government mechanic.",
                "scope": "Country",
                "example": "has_government_mechanic = russian_mechanic"
            }
        ],
        "macro": []
    },
    "has_government_power": {
        "id": "has_government_power",
        "value_types": [
            {
                "type": "[typeNeeded]",
                "description": "[description needed]",
                "scope": "Country",
                "example": "[example needed]"
            }
        ],
        "macro": []
    },
    "has_harmonized_with": {
        "id": "has_harmonized_with",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country has harmonized with the specified religion or religion group.",
                "scope": "Country",
                "example": "has_harmonized_with = tengri_pagan_reformed"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country has harmonized with the specified religion or religion group.",
                "scope": "Country",
                "example": "has_harmonized_with = tengri_pagan_reformed"
            }
        ],
        "macro": []
    },
    "has_harsh_treatment": {
        "id": "has_harsh_treatment",
        "value_types": [
            {
                "type": "Boolean",
                "description": "[description needed]",
                "scope": "[scope needed]",
                "example": "has_harsh_treatment = yes"
            }
        ],
        "macro": []
    },
    "has_heir": {
        "id": "has_heir",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has an heir (named X).",
                "scope": "Country",
                "example": "has_heir = yes"
            },
            {
                "type": "Name",
                "description": "Returns true if the country has an heir (named X).",
                "scope": "Country",
                "example": "has_heir = yes"
            }
        ],
        "macro": []
    },
    "has_heir_flag": {
        "id": "has_heir_flag",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the heir flag X is set.",
                "scope": "Country",
                "example": "has_heir_flag = suspected_bastard"
            }
        ],
        "macro": []
    },
    "has_heir_leader_from": {
        "id": "has_heir_leader_from",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if an army in the province is led by an heir from X.",
                "scope": "Province",
                "example": "has_heir_leader_from = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if an army in the province is led by an heir from X.",
                "scope": "Province",
                "example": "has_heir_leader_from = ROOT"
            }
        ],
        "macro": []
    },
    "has_hostile_reformation_center": {
        "id": "has_hostile_reformation_center",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a hostile center of reformation.",
                "scope": "Country",
                "example": "has_hostile_reformation_center = yes"
            }
        ],
        "macro": []
    },
    "has_idea": {
        "id": "has_idea",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has the X idea.",
                "scope": "Country",
                "example": "has_idea = grand_navy"
            }
        ],
        "macro": []
    },
    "has_idea_group": {
        "id": "has_idea_group",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has chosen the X idea group.",
                "scope": "Country",
                "example": "has_idea_group = humanist_ideas"
            }
        ],
        "macro": []
    },
    "has_influencing_fort": {
        "id": "has_influencing_fort",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province has an influencing fort.",
                "scope": "Province",
                "example": "has_influencing_fort = yes"
            }
        ],
        "macro": []
    },
    "has_institution": {
        "id": "has_institution",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has the specified institution.",
                "scope": "Country",
                "example": "has_institution = feudalism"
            }
        ],
        "macro": []
    },
    "has_latent_trade_goods": {
        "id": "has_latent_trade_goods",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province has the specified latent trade good.",
                "scope": "Province",
                "example": "has_latent_trade_goods = coal"
            }
        ],
        "macro": []
    },
    "has_leader": {
        "id": "has_leader",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has the leader \"X\".",
                "scope": "Country",
                "example": "has_leader = \"J\u00e1nos Hunyadi\""
            }
        ],
        "macro": []
    },
    "has_leader_with": {
        "id": "has_leader_with",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has a leader with at least the specified stats.\nadmiral = yes and general = yes can be used as further limitation.",
                "scope": "Country",
                "example": "has_leader_with = {\n fire = 3\n shock = 3\n manuever = 2\n siege = 1\n}"
            }
        ],
        "macro": []
    },
    "has_local_modifier_value": {
        "id": "has_local_modifier_value",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the value of the specified modifier is at least X for the province.",
                "scope": "Province",
                "example": "has_local_modifier_value = {\n which = local_production_efficiency\n value = 0.15\n}"
            }
        ],
        "macro": []
    },
    "has_matching_religion": {
        "id": "has_matching_religion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has the specified religion or syncretic faith.",
                "scope": "Country",
                "example": "has_matching_religion = mahayana"
            },
            {
                "type": "Scope",
                "description": "Returns true if the countries have the same religion or syncretic faith.",
                "scope": "Country",
                "example": "has_matching_religion = ROOT"
            }
        ],
        "macro": []
    },
    "has_merchant": {
        "id": "has_merchant",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the scoped country has an active merchant in the trade node.",
                "scope": "Province\n(Trade node)",
                "example": "has_merchant = PREV"
            },
            {
                "type": "Scope",
                "description": "Returns true if the scoped country has an active merchant in the trade node.",
                "scope": "Province\n(Trade node)",
                "example": "has_merchant = PREV"
            }
        ],
        "macro": []
    },
    "has_mission": {
        "id": "has_mission",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has the specified mission.",
                "scope": "Country",
                "example": "has_mission = rus_patriarchate_mission"
            }
        ],
        "macro": []
    },
    "has_missionary": {
        "id": "has_missionary",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province has an active missionary.",
                "scope": "Province",
                "example": "has_missionary = yes"
            }
        ],
        "macro": []
    },
    "has_monsoon": {
        "id": "has_monsoon",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province has monsoon X.",
                "scope": "Province",
                "example": "has_monsoon = normal_monsoon"
            }
        ],
        "macro": []
    },
    "has_most_province_trade_power": {
        "id": "has_most_province_trade_power",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country X has most amount of trade power in trade node.",
                "scope": "Province\n(Trade node)",
                "example": "has_most_province_trade_power = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country X has most amount of trade power in trade node.",
                "scope": "Province\n(Trade node)",
                "example": "has_most_province_trade_power = ROOT"
            }
        ],
        "macro": []
    },
    "has_new_dynasty": {
        "id": "has_new_dynasty",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a new dynasty.",
                "scope": "Country",
                "example": "has_new_dynasty = yes"
            }
        ],
        "macro": []
    },
    "has_opinion": {
        "id": "has_opinion",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has at least value opinion of the country specified by who.",
                "scope": "Country",
                "example": "has_opinion = {\n who = ROOT\n value = 10\n}"
            }
        ],
        "macro": []
    },
    "has_opinion_diff": {
        "id": "has_opinion_diff",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if opinion difference between country X and Y, is at least Z",
                "scope": "Country",
                "example": ""
            }
        ],
        "macro": []
    },
    "has_opinion_modifier": {
        "id": "has_opinion_modifier",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has the opinion modifier modifier towards the country specified by who.\nCan also specify a value of the modifier (but it is not displayed).",
                "scope": "Country",
                "example": "has_opinion_modifier = {\n who = ROOT\n modifier = embraced_absolutism\n}"
            }
        ],
        "macro": []
    },
    "has_owner_accepted_culture": {
        "id": "has_owner_accepted_culture",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the culture of the province is an accepted culture(NOT primary!) of its owner.",
                "scope": "Province",
                "example": "has_owner_accepted_culture = yes"
            }
        ],
        "macro": []
    },
    "has_owner_culture": {
        "id": "has_owner_culture",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province has the primary culture of its owner.",
                "scope": "Province",
                "example": "has_owner_culture = no"
            }
        ],
        "macro": []
    },
    "has_owner_religion": {
        "id": "has_owner_religion",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province has the religion of its owner.",
                "scope": "Province",
                "example": "has_owner_religion = yes"
            }
        ],
        "macro": []
    },
    "has_pasha": {
        "id": "has_pasha",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province has a pasha.",
                "scope": "Province",
                "example": "has_pasha = yes"
            }
        ],
        "macro": []
    },
    "has_parliament": {
        "id": "has_parliament",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a parliament.",
                "scope": "Country",
                "example": "has_parliament = yes"
            }
        ],
        "macro": []
    },
    "has_personal_deity": {
        "id": "has_personal_deity",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the ruler of the country has picked the specified personal deity.",
                "scope": "Country",
                "example": "has_personal_deity = shakti"
            }
        ],
        "macro": []
    },
    "has_port": {
        "id": "has_port",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if it is a coastal province.",
                "scope": "Province",
                "example": "has_port = yes"
            }
        ],
        "macro": []
    },
    "has_privateers": {
        "id": "has_privateers",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has privateers in any trade node.",
                "scope": "Country",
                "example": "has_privateers = yes"
            }
        ],
        "macro": []
    },
    "has_promote_investments": {
        "id": "has_promote_investments",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country is promoting investments in the specified trade company (region).",
                "scope": "Country",
                "example": "has_promote_investments = trade_company_moluccas"
            }
        ],
        "macro": []
    },
    "has_province_flag": {
        "id": "has_province_flag",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province has the province flag X.",
                "scope": "Province",
                "example": "has_province_flag = bur_succession_province"
            }
        ],
        "macro": []
    },
    "has_province_modifier": {
        "id": "has_province_modifier",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if province has the province modifier X.\n(Checks also for triggered province modifiers.)",
                "scope": "Province",
                "example": "has_province_modifier = local_christian_mission"
            }
        ],
        "macro": []
    },
    "has_rebel_faction": {
        "id": "has_rebel_faction",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province is controlled by (the specified) rebel faction.",
                "scope": "Province",
                "example": "has_rebel_faction = pretender_rebels"
            },
            {
                "type": "Reb",
                "description": "Used by Paradox, doesn't seem to work though (in EU4 version 1.25).",
                "scope": "Province",
                "example": "has_rebel_faction = REB"
            }
        ],
        "macro": []
    },
    "has_regency": {
        "id": "has_regency",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a regency.",
                "scope": "Country",
                "example": "has_regency = no"
            }
        ],
        "macro": []
    },
    "has_reform": {
        "id": "has_reform",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has the specific government reform.",
                "scope": "Country",
                "example": "has_reform = ottoman_government"
            }
        ],
        "macro": []
    },
    "government_reform_progress": {
        "id": "government_reform_progress",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has x or more reform progress saved up.",
                "scope": "Country",
                "example": "government_reform_progress = 5"
            }
        ],
        "macro": []
    },
    "has_removed_fow": {
        "id": "has_removed_fow",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has lifted the fog of war from the specified country.",
                "scope": "Country",
                "example": "FRA = { has_removed_fow = yes }"
            }
        ],
        "macro": []
    },
    "has_revolution_in_province": {
        "id": "has_revolution_in_province",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the revolution is present in the province.",
                "scope": "Province",
                "example": "has_revolution_in_province = yes"
            }
        ],
        "macro": []
    },
    "has_ruler": {
        "id": "has_ruler",
        "value_types": [
            {
                "type": "Name",
                "description": "Returns true if the country has a ruler named \"X\".",
                "scope": "Country",
                "example": "has_ruler = \"Pachacuti\""
            }
        ],
        "macro": []
    },
    "has_ruler_flag": {
        "id": "has_ruler_flag",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the ruler flag X is set for the country.",
                "scope": "Country",
                "example": "has_ruler_flag = helped_rival"
            }
        ],
        "macro": []
    },
    "has_ruler_leader_from": {
        "id": "has_ruler_leader_from",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if an army in the province is led by a ruler from X.",
                "scope": "Province",
                "example": "has_ruler_leader_from = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if an army in the province is led by a ruler from X.",
                "scope": "Province",
                "example": "has_ruler_leader_from = ROOT"
            }
        ],
        "macro": []
    },
    "has_ruler_modifier": {
        "id": "has_ruler_modifier",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true the country has the modifier X until the ruler changes.",
                "scope": "Country",
                "example": "has_ruler_modifier = inside_man"
            }
        ],
        "macro": []
    },
    "has_saved_event_target": {
        "id": "has_saved_event_target",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the specified event target has been saved.",
                "scope": "",
                "example": "has_saved_event_target = muslim_neighbor"
            }
        ],
        "macro": []
    },
    "has_scutage": {
        "id": "has_scutage",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the vassal pays scutage.",
                "scope": "(Subject) Country",
                "example": "has_scutage = yes"
            }
        ],
        "macro": []
    },
    "has_seat_in_parliament": {
        "id": "has_seat_in_parliament",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province has a seat in parliament.",
                "scope": "Province",
                "example": "has_seat_in_parliament = no"
            }
        ],
        "macro": []
    },
    "has_secondary_religion": {
        "id": "has_secondary_religion",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the county has a secondary religion.",
                "scope": "Country",
                "example": "has_secondary_religion = yes"
            }
        ],
        "macro": []
    },
    "has_send_officers": {
        "id": "has_send_officers",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the protectorate has received officers.",
                "scope": "(Subject) Country",
                "example": "has_send_officers = yes"
            }
        ],
        "macro": []
    },
    "has_siege": {
        "id": "has_siege",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province has siege.",
                "scope": "Province",
                "example": "has_siege = yes"
            }
        ],
        "macro": []
    },
    "has_spawned_rebels": {
        "id": "has_spawned_rebels",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if rebels of the specified type are active in the country.",
                "scope": "Country",
                "example": "has_spawned_rebels = particularist_rebels"
            }
        ],
        "macro": []
    },
    "has_spawned_supported_rebels": {
        "id": "has_spawned_supported_rebels",
        "value_types": [
            {
                "type": "Scope",
                "description": "Returns true if rebels which were supported by the secified country are active in the country.",
                "scope": "Country",
                "example": "has_spawned_supported_rebels = FROM"
            }
        ],
        "macro": []
    },
    "has_spy_network_from": {
        "id": "has_spy_network_from",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country X has a spy network of at least the specified size in the country.",
                "scope": "Country",
                "example": "has_spy_network_from = {\n who = ROOT\n value = 25\n}"
            }
        ],
        "macro": []
    },
    "has_spy_network_in": {
        "id": "has_spy_network_in",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has a spy network of at least the specified size in country X.",
                "scope": "Country",
                "example": "has_spy_network_in = {\n who = ROOT\n value = 25\n}"
            }
        ],
        "macro": []
    },
    "has_state_edict": {
        "id": "has_state_edict",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the state has X edict enabled.",
                "scope": "State",
                "example": "has_state_edict = edict_of_absolutism"
            }
        ],
        "macro": []
    },
    "has_state_patriach": {
        "id": "has_state_patriach",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true, if the province has any state patriarch.",
                "scope": "Province",
                "example": "has_state_patriach = yes"
            }
        ],
        "macro": []
    },
    "has_subsidize_armies": {
        "id": "has_subsidize_armies",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the march has subsidizes armies.",
                "scope": "(Subject) Country",
                "example": "has_subsidize_armies = yes"
            }
        ],
        "macro": []
    },
    "has_support_loyalists": {
        "id": "has_support_loyalists",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the subject nation receives support for loyalists.",
                "scope": "(Subject) Country",
                "example": "has_support_loyalists = yes"
            }
        ],
        "macro": []
    },
    "has_switched_nation": {
        "id": "has_switched_nation",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the player has changed nation by playing as a released vassal.",
                "scope": "Anywhere",
                "example": "has_switched_nation = no"
            }
        ],
        "macro": []
    },
    "has_terrain": {
        "id": "has_terrain",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province has terrain X. Terrains are listed in base game file terrains.txt",
                "scope": "Province",
                "example": "has_terrain = marsh"
            }
        ],
        "macro": []
    },
    "has_trade_modifier": {
        "id": "has_trade_modifier",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true the specified country has the trade modifier X in the trade node.",
                "scope": "Province\n(Trade node)",
                "example": "has_trade_modifier = {\n who = ROOT\n key = income_bonanza\n}"
            }
        ],
        "macro": []
    },
    "has_trader": {
        "id": "has_trader",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the specified country has a merchant in the trade node.",
                "scope": "Province\n(Trade node)",
                "example": "has_trader = VEN"
            },
            {
                "type": "Scope",
                "description": "Returns true if the specified country has a merchant in the trade node.",
                "scope": "Province\n(Trade node)",
                "example": "has_trader = VEN"
            }
        ],
        "macro": []
    },
    "has_truce": {
        "id": "has_truce",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a truce.",
                "scope": "Country",
                "example": "has_truce = yes"
            }
        ],
        "macro": []
    },
    "has_unembraced_institution": {
        "id": "has_unembraced_institution",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has not embraced the specified institution.",
                "scope": "Country",
                "example": "has_unembraced_institution = feudalism"
            }
        ],
        "macro": []
    },
    "has_unified_culture_group": {
        "id": "has_unified_culture_group",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true, if the country owns all provinces of its culture group.",
                "scope": "Country",
                "example": "has_unified_culture_group = yes"
            }
        ],
        "macro": []
    },
    "has_unit_type": {
        "id": "has_unit_type",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has selected unit type X as preferable unit.",
                "scope": "Country",
                "example": "unit_type = polish_winged_hussar"
            }
        ],
        "macro": []
    },
    "has_unlocked_cult": {
        "id": "has_unlocked_cult",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has unlocked the specified cult.",
                "scope": "Country",
                "example": "has_unlocked_cult = jewish_cult"
            }
        ],
        "macro": []
    },
    "has_wartaxes": {
        "id": "has_wartaxes",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has raised war taxes.",
                "scope": "Country",
                "example": "has_wartaxes = yes"
            }
        ],
        "macro": []
    },
    "has_winter": {
        "id": "has_winter",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province has winter X.",
                "scope": "Province",
                "example": "has_winter = normal_winter"
            }
        ],
        "macro": []
    },
    "has_won_war_against": {
        "id": "has_won_war_against",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true the country has won a war against the specified country during the last X years.",
                "scope": "Country",
                "example": "has_won_war_against = {\n who = PREV\n max_years_since = 100\n}"
            }
        ],
        "macro": []
    },
    "heavy_ship_fraction": {
        "id": "heavy_ship_fraction",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of the heavy ship fraction to the navy size of the country is at least X.",
                "scope": "Country",
                "example": "heavy_ship_fraction = 0.33"
            }
        ],
        "macro": []
    },
    "heavy_ships_in_province": {
        "id": "heavy_ships_in_province",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X heavy ships in the province.",
                "scope": "Province",
                "example": "heavy_ships_in_province = 2"
            },
            {
                "type": "Tag",
                "description": "Returns true if there are heavy ships from the specified country in the province.",
                "scope": "Province",
                "example": "heavy_ships_in_province = TUN"
            },
            {
                "type": "Scope",
                "description": "Returns true if there are heavy ships from the specified country in the province.",
                "scope": "Province",
                "example": "heavy_ships_in_province = TUN"
            }
        ],
        "macro": []
    },
    "heir_adm": {
        "id": "heir_adm",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an heir with an administrative skill of at least X.",
                "scope": "Country",
                "example": "heir_adm = 5"
            }
        ],
        "macro": []
    },
    "heir_age": {
        "id": "heir_age",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an heir that is at least X years old.",
                "scope": "Country",
                "example": "heir_age = 15"
            }
        ],
        "macro": []
    },
    "heir_dip": {
        "id": "heir_dip",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an heir with a diplomatic skill of at least X.",
                "scope": "Country",
                "example": "heir_dip = 5"
            }
        ],
        "macro": []
    },
    "heir_claim": {
        "id": "heir_claim",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an heir with a claim strength of at least X.",
                "scope": "Country",
                "example": "heir_claim = 90"
            }
        ],
        "macro": []
    },
    "heir_culture": {
        "id": "heir_culture",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country's heir has the specified culture. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "heir_culture = prussian"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country's heir has the specified culture. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "heir_culture = prussian"
            }
        ],
        "macro": []
    },
    "heir_has_consort_dynasty": {
        "id": "heir_has_consort_dynasty",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country\u2019s heir and consort have the same dynasty.",
                "scope": "Country",
                "example": "heir_has_consort_dynasty = yes"
            }
        ],
        "macro": []
    },
    "heir_has_personality": {
        "id": "heir_has_personality",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country\u2019s heir has the specified personality.",
                "scope": "Country",
                "example": "heir_has_personality = intricate_web_weaver_personality"
            }
        ],
        "macro": []
    },
    "heir_has_ruler_dynasty": {
        "id": "heir_has_ruler_dynasty",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country\u2019s heir and ruler have the same dynasty.",
                "scope": "Country",
                "example": "heir_has_ruler_dynasty = yes"
            }
        ],
        "macro": []
    },
    "heir_mil": {
        "id": "heir_mil",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an heir with a military skill of at least X.",
                "scope": "Country",
                "example": "heir_mil = 5"
            }
        ],
        "macro": []
    },
    "heir_nationality": {
        "id": "heir_nationality",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country has an heir with nationality X.",
                "scope": "Country",
                "example": "heir_nationality = PREV"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has an heir with nationality X.",
                "scope": "Country",
                "example": "heir_nationality = PREV"
            }
        ],
        "macro": []
    },
    "heir_religion": {
        "id": "heir_religion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country's heir has the specified religion. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "heir_religion = catholic"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country's heir has the specified religion. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "heir_religion = catholic"
            }
        ],
        "macro": []
    },
    "hidden_trigger": {
        "id": "hidden_trigger",
        "value_types": [
            {
                "type": "Clause",
                "description": "Hides the enclosed conditions so that they are still required but cannot be seen by human players.",
                "scope": "Anywhere",
                "example": "hidden_trigger = {\n NOT = {\n  estate_influence = {\n   estate = estate_nomadic_tribes\n   influence = 85\n  }\n }\n}"
            }
        ],
        "macro": []
    },
    "highest_value_trade_node": {
        "id": "highest_value_trade_node",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the trade node is the highest valued trade node in the world.\nThe value is calculated as total trade value minus outgoing trade value.",
                "scope": "Province\n(Trade node)",
                "example": "highest_value_trade_node = yes"
            }
        ],
        "macro": []
    },
    "historical_friend_with": {
        "id": "historical_friend_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the countries are historical friends.",
                "scope": "Country",
                "example": "historical_friend_with = FROM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the countries are historical friends.",
                "scope": "Country",
                "example": "historical_friend_with = FROM"
            }
        ],
        "macro": []
    },
    "historical_rival_with": {
        "id": "historical_rival_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the countries are historical rivals",
                "scope": "Country",
                "example": "historical_rival_with = TEU"
            },
            {
                "type": "Scope",
                "description": "Returns true if the countries are historical rivals",
                "scope": "Country",
                "example": "historical_rival_with = TEU"
            }
        ],
        "macro": []
    },
    "horde_unity": {
        "id": "horde_unity",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a horde unity of at least X.",
                "scope": "Country",
                "example": "horde_unity = 50"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much horde unity as the specified country.",
                "scope": "Country",
                "example": "horde_unity = GOL"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much horde unity as the specified country.",
                "scope": "Country",
                "example": "horde_unity = GOL"
            }
        ],
        "macro": []
    },
    "hre_heretic_religion": {
        "id": "hre_heretic_religion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the specified religion is the opposition religion of the HRE.\nNote: No localisation for the negation.",
                "scope": "Anywhere",
                "example": "hre_heretic_religion = catholic"
            },
            {
                "type": "Scope",
                "description": "Returns true if the specified religion is the opposition religion of the HRE.\nNote: No localisation for the negation.",
                "scope": "Anywhere",
                "example": "hre_heretic_religion = catholic"
            }
        ],
        "macro": []
    },
    "hre_leagues_enabled": {
        "id": "hre_leagues_enabled",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true religious leagues are enabled.",
                "scope": "Anywhere",
                "example": "hre_leagues_enabled = yes"
            }
        ],
        "macro": []
    },
    "hre_reform_level": {
        "id": "hre_reform_level",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the Xth imperial reform is enacted.",
                "scope": "Anywhere",
                "example": "hre_reform_level = 6"
            }
        ],
        "macro": []
    },
    "hre_reform_passed": {
        "id": "hre_reform_passed",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the specific imperial reform is enacted.",
                "scope": "Anywhere",
                "example": "hre_reform_passed = emperor_privilegia_de_non_appelando/code>"
            }
        ],
        "macro": []
    },
    "hre_religion": {
        "id": "hre_religion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the specified religion is the dominant faith of the HRE.",
                "scope": "Anywhere",
                "example": "hre_religion = catholic"
            },
            {
                "type": "Scope",
                "description": "Returns true if the specified religion is the dominant faith of the HRE.",
                "scope": "Anywhere",
                "example": "hre_religion = catholic"
            }
        ],
        "macro": []
    },
    "hre_religion_locked": {
        "id": "hre_religion_locked",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if an official faith of the HRE has been permanently established.",
                "scope": "Anywhere",
                "example": "hre_religion_locked = no"
            }
        ],
        "macro": []
    },
    "hre_religion_treaty": {
        "id": "hre_religion_treaty",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the treaty of religious peace in the HRE has been signed.",
                "scope": "Anywhere",
                "example": "hre_religion_treaty = no"
            }
        ],
        "macro": []
    },
    "hre_size": {
        "id": "hre_size",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the HRE contains at least X members.",
                "scope": "Anywhere",
                "example": "hre_size = 10"
            }
        ],
        "macro": []
    },
    "imperial_influence": {
        "id": "imperial_influence",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the emperor of the HRE has an imperial authority of at least X.",
                "scope": "Anywhere",
                "example": "imperial_influence = 25"
            }
        ],
        "macro": []
    },
    "imperial_mandate": {
        "id": "imperial_mandate",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the emperor of China has at least X mandate.",
                "scope": "Anywhere",
                "example": "imperial_mandate = 80"
            }
        ],
        "macro": []
    },
    "in_golden_age": {
        "id": "in_golden_age",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true, if the country currently is in a golden age.",
                "scope": "Country",
                "example": "in_golden_age = yes"
            }
        ],
        "macro": []
    },
    "infantry_fraction": {
        "id": "infantry_fraction",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of the infantry fraction to the army size of the country is at least X.",
                "scope": "Country",
                "example": "infantry_fraction = 0.6"
            }
        ],
        "macro": []
    },
    "infantry_in_province": {
        "id": "infantry_in_province",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X infantry units in the province.",
                "scope": "Province",
                "example": "infantry_in_province = 17"
            },
            {
                "type": "Tag",
                "description": "Returns true if there are infantry units from the specified country in the province.",
                "scope": "Province",
                "example": "infantry_in_province = SHL"
            },
            {
                "type": "Scope",
                "description": "Returns true if there are infantry units from the specified country in the province.",
                "scope": "Province",
                "example": "infantry_in_province = SHL"
            }
        ],
        "macro": []
    },
    "inflation": {
        "id": "inflation",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has an inflation of at least X",
                "scope": "Country",
                "example": "inflation = 10"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much inflation as the country X.",
                "scope": "Country",
                "example": "inflation = NOV"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much inflation as the country X.",
                "scope": "Country",
                "example": "inflation = NOV"
            }
        ],
        "macro": []
    },
    "incident_variable_value": {
        "id": "incident_variable_value",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true, if the value of the specified incident is at least X.",
                "scope": "Country",
                "example": "incident_variable_value = {\n incident = incident_neo_confucianism\n value = 10\n}"
            }
        ],
        "macro": []
    },
    "innovativeness": {
        "id": "innovativeness",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the countries has at least X innovativeness.",
                "scope": "Country",
                "example": "innovativeness = 15"
            }
        ],
        "macro": []
    },
    "institution_difference": {
        "id": "institution_difference",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has embraced at least X more institutions than the specified country.",
                "scope": "Country",
                "example": "institution_difference = {\n who = SWE\n value = 2\n}"
            }
        ],
        "macro": []
    },
    "invested_papal_influence": {
        "id": "invested_papal_influence",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has invested at least X papal influence in the election of the next papal controller.",
                "scope": "Country",
                "example": "invested_papal_influence = 50"
            }
        ],
        "macro": []
    },
    "in_league": {
        "id": "in_league",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the countries is in the X league.",
                "scope": "Country",
                "example": "in_league = protestant"
            }
        ],
        "macro": []
    },
    "ironman": {
        "id": "ironman",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the ironman mode is enabled",
                "scope": "Anywhere",
                "example": "ironman = yes"
            }
        ],
        "macro": []
    },
    "is_advisor_employed": {
        "id": "is_advisor_employed",
        "value_types": [
            {
                "type": "AdvisorId[1]",
                "description": "Returns true if the advisor with the ID X is employed.",
                "scope": "",
                "example": "is_advisor_employed = 562"
            }
        ],
        "macro": []
    },
    "is_all_concessions_in_council_taken": {
        "id": "is_all_concessions_in_council_taken",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if all concessions in the Council of Trent have been taken.",
                "scope": "Global",
                "example": "is_all_concessions_in_council_taken = yes"
            }
        ],
        "macro": []
    },
    "is_at_war": {
        "id": "is_at_war",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is at war.",
                "scope": "Country",
                "example": "is_at_war = yes"
            }
        ],
        "macro": []
    },
    "is_backing_current_issue": {
        "id": "is_backing_current_issue",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is backing the current issue in the parliament.",
                "scope": "Province",
                "example": "is_backing_current_issue = yes"
            }
        ],
        "macro": []
    },
    "is_bankrupt": {
        "id": "is_bankrupt",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is bankrupt.",
                "scope": "Country",
                "example": "is_bankrupt = yes"
            }
        ],
        "macro": []
    },
    "is_blockaded": {
        "id": "is_blockaded",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is blockaded.",
                "scope": "Province",
                "example": "is_blockaded = yes"
            }
        ],
        "macro": []
    },
    "is_capital": {
        "id": "is_capital",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is a capital.",
                "scope": "Province",
                "example": "is_capital = yes"
            }
        ],
        "macro": []
    },
    "is_capital_of": {
        "id": "is_capital_of",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the province the capital of the specified country.",
                "scope": "Province",
                "example": "is_capital_of = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province the capital of the specified country.",
                "scope": "Province",
                "example": "is_capital_of = ROOT"
            }
        ],
        "macro": []
    },
    "is_city": {
        "id": "is_city",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is a city, i.e. has a population of at least 1000.",
                "scope": "Province",
                "example": "is_city = yes"
            }
        ],
        "macro": []
    },
    "is_claim": {
        "id": "is_claim",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true if the country has a claim on the province with the ID X.",
                "scope": "Country",
                "example": "is_claim = 337"
            },
            {
                "type": "Tag",
                "description": "Returns true if the specified country has a claim on the province.",
                "scope": "Province",
                "example": "is_claim = MCH"
            },
            {
                "type": "Scope",
                "description": "Returns true if the specified country has a claim on the province.",
                "scope": "Province",
                "example": "is_claim = MCH"
            }
        ],
        "macro": []
    },
    "is_client_nation": {
        "id": "is_client_nation",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a client state.",
                "scope": "Country",
                "example": "is_client_nation = yes"
            }
        ],
        "macro": []
    },
    "is_client_nation_of": {
        "id": "is_client_nation_of",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is a client state of X.",
                "scope": "Country",
                "example": "is_client_nation_of = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is a client state of X.",
                "scope": "Country",
                "example": "is_client_nation_of = ROOT"
            }
        ],
        "macro": []
    },
    "is_colonial_nation": {
        "id": "is_colonial_nation",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a non-independent colonial nation.",
                "scope": "Country",
                "example": "is_colonial_nation = yes"
            }
        ],
        "macro": []
    },
    "is_colonial_nation_of": {
        "id": "is_colonial_nation_of",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is a colonial nation of X.",
                "scope": "Country",
                "example": "is_colonial_nation_of = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is a colonial nation of X.",
                "scope": "Country",
                "example": "is_colonial_nation_of = ROOT"
            }
        ],
        "macro": []
    },
    "is_colony": {
        "id": "is_colony",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is a colony.",
                "scope": "Province",
                "example": "is_colony = yes"
            }
        ],
        "macro": []
    },
    "is_core": {
        "id": "is_core",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true if the country has a core on the province with the ID X.",
                "scope": "Country",
                "example": "is_core = 950"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country X has a core on the province.",
                "scope": "Province",
                "example": "is_core = NED"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country X has a core on the province.",
                "scope": "Province",
                "example": "is_core = NED"
            }
        ],
        "macro": []
    },
    "is_council_enabled": {
        "id": "is_council_enabled",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the Council of Trent has started.",
                "scope": "Global",
                "example": "is_council_enabled = yes"
            }
        ],
        "macro": []
    },
    "is_crusade_target": {
        "id": "is_crusade_target",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is the target of a crusade.",
                "scope": "Country",
                "example": "is_crusade_target = yes"
            }
        ],
        "macro": []
    },
    "is_defender_of_faith": {
        "id": "is_defender_of_faith",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is the defender of the faith.",
                "scope": "Country",
                "example": "is_defender_of_faith = yes"
            }
        ],
        "macro": []
    },
    "is_defender_of_faith_of_tier": {
        "id": "is_defender_of_faith_of_tier",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country is the defender of the faith of at least tier X.",
                "scope": "Country",
                "example": "is_defender_of_faith_of_tier = 4"
            }
        ],
        "macro": []
    },
    "is_dynamic_tag": {
        "id": "is_dynamic_tag",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true, if the country is a dynamically created tag (e.g. client states).",
                "scope": "Country",
                "example": "is_dynamic_tag = yes"
            }
        ],
        "macro": []
    },
    "is_elector": {
        "id": "is_elector",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is an elector of the HRE.",
                "scope": "Country",
                "example": "is_elector = yes"
            }
        ],
        "macro": []
    },
    "is_emperor": {
        "id": "is_emperor",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is the emperor of the HRE.",
                "scope": "Country",
                "example": "is_emperor = yes"
            }
        ],
        "macro": []
    },
    "is_emperor_of_china": {
        "id": "is_emperor_of_china",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is the emperor of China.",
                "scope": "Country",
                "example": "is_emperor_of_china = yes"
            }
        ],
        "macro": []
    },
    "is_empty": {
        "id": "is_empty",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if province is empty",
                "scope": "Province",
                "example": "is_empty = yes"
            }
        ],
        "macro": []
    },
    "is_enemy": {
        "id": "is_enemy",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true the country views country X as an enemy.",
                "scope": "Country",
                "example": "is_enemy = ROOT"
            }
        ],
        "macro": []
    },
    "is_excommunicated": {
        "id": "is_excommunicated",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the ruler of the country is excommunicated.",
                "scope": "Country",
                "example": "is_excommunicated = yes"
            }
        ],
        "macro": []
    },
    "is_federation_leader": {
        "id": "is_federation_leader",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a federation leader.",
                "scope": "Country",
                "example": "is_federation_leader = yes"
            }
        ],
        "macro": []
    },
    "is_female": {
        "id": "is_female",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if ruler of the country is female.",
                "scope": "Country",
                "example": "is_female = yes"
            }
        ],
        "macro": []
    },
    "is_force_converted": {
        "id": "is_force_converted",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if country has been force-converted via either religious rebels or an Enforce Religion peace treaty.\nNote: The subject interaction Enforce Religion does not cause the subject to be considered as force-converted.",
                "scope": "Country",
                "example": "is_force_converted = no"
            }
        ],
        "macro": []
    },
    "is_former_colonial_nation": {
        "id": "is_former_colonial_nation",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a colonial nation that has gained independence.",
                "scope": "Country",
                "example": "is_former_colonial_nation = no"
            }
        ],
        "macro": []
    },
    "is_great_power": {
        "id": "is_great_power",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a great power.",
                "scope": "Country",
                "example": "is_great_power = yes"
            }
        ],
        "macro": []
    },
    "is_harmonizing_with": {
        "id": "is_harmonizing_with",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country is currently harmonizing with the specified religion or religion group.",
                "scope": "Country",
                "example": "is_harmonizing_with = tengri_pagan_reformed"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country is currently harmonizing with the specified religion or religion group.",
                "scope": "Country",
                "example": "is_harmonizing_with = tengri_pagan_reformed"
            }
        ],
        "macro": []
    },
    "is_heir_leader": {
        "id": "is_heir_leader",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the heir of the country is a general.\nNote: Proper localisation for the negation only with NOT = \u2026.",
                "scope": "Country",
                "example": "is_heir_leader = yes"
            }
        ],
        "macro": []
    },
    "is_hegemon": {
        "id": "is_hegemon",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is considered one of the three Hegemon types.",
                "scope": "Country",
                "example": "is_hegemon = yes"
            }
        ],
        "macro": []
    },
    "is_imperial_ban_allowed": {
        "id": "is_imperial_ban_allowed",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the emperor has a casus belli on occupiers of the Empire.\nNote: Enabled/Disabled with Call for Reichsreform.",
                "scope": "Anywhere",
                "example": "is_imperial_ban_allowed = yes"
            }
        ],
        "macro": []
    },
    "is_incident_active": {
        "id": "is_incident_active",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the specified incident is active.",
                "scope": "Country",
                "example": "is_incident_active = incident_neo_confucianism"
            },
            {
                "type": "Boolean",
                "description": "Returns true, if any/none incident is active.",
                "scope": "Country",
                "example": "is_incident_active = any"
            },
            {
                "type": "Any",
                "description": "Returns true, if any/none incident is active.",
                "scope": "Country",
                "example": "is_incident_active = any"
            },
            {
                "type": "None",
                "description": "Returns true, if any/none incident is active.",
                "scope": "Country",
                "example": "is_incident_active = any"
            }
        ],
        "macro": []
    },
    "is_incident_happened": {
        "id": "is_incident_happened",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the specified incident already happened.",
                "scope": "Country",
                "example": "is_incident_happened = incident_neo_confucianism"
            }
        ],
        "macro": []
    },
    "is_incident_possible": {
        "id": "is_incident_possible",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the specified incident can possibly happen.",
                "scope": "Country",
                "example": "is_incident_possible = incident_neo_confucianism"
            }
        ],
        "macro": []
    },
    "is_incident_potential": {
        "id": "is_incident_potential",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the specified incident is visible and therefor can happen in the future.",
                "scope": "Country",
                "example": "is_incident_potential = incident_neo_confucianism"
            }
        ],
        "macro": []
    },
    "is_institution_enabled": {
        "id": "is_institution_enabled",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the specified institution has been discovered.",
                "scope": "Anywhere",
                "example": "is_institution_enabled = renaissance"
            }
        ],
        "macro": []
    },
    "is_institution_origin": {
        "id": "is_institution_origin",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province is the origin of the specified institution.",
                "scope": "Province",
                "example": "is_institution_origin = printing_press"
            }
        ],
        "macro": []
    },
    "is_in_capital_area": {
        "id": "is_in_capital_area",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is connected (i.e. has a land connection including straits) to the capital of its owner.",
                "scope": "Province",
                "example": "is_in_capital_area = yes"
            }
        ],
        "macro": []
    },
    "is_in_coalition": {
        "id": "is_in_coalition",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is in a coalition.",
                "scope": "Country",
                "example": "is_in_coalition = no"
            }
        ],
        "macro": []
    },
    "is_in_coalition_war": {
        "id": "is_in_coalition_war",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is fighting a coalition war.",
                "scope": "Country",
                "example": "is_in_coalition_war = yes"
            }
        ],
        "macro": []
    },
    "is_in_deficit": {
        "id": "is_in_deficit",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is running a deficit.",
                "scope": "Country",
                "example": "is_in_deficit = yes"
            }
        ],
        "macro": []
    },
    "is_in_league_war": {
        "id": "is_in_league_war",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is in a religious league war.",
                "scope": "Country",
                "example": "is_in_league_war = yes"
            }
        ],
        "macro": []
    },
    "is_in_trade_league": {
        "id": "is_in_trade_league",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a member of a trade league.",
                "scope": "Country",
                "example": "is_in_trade_league = yes"
            }
        ],
        "macro": []
    },
    "is_in_trade_league_with": {
        "id": "is_in_trade_league_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is a member of the same trade league as country X.",
                "scope": "Country",
                "example": "is_in_trade_league_with = VEN"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is a member of the same trade league as country X.",
                "scope": "Country",
                "example": "is_in_trade_league_with = VEN"
            }
        ],
        "macro": []
    },
    "is_in_war": {
        "id": "is_in_war",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country is at war and the mentioned conditions are fulfilled.\nPossible are: attacker_leader, defender_leader, casus_belli, defenders, attackers, participants, war_score, start_date, duration, war_goal_province.",
                "scope": "Country",
                "example": "is_in_war = {\n    attacker_leader = ROOT\n    duration = 1875\n}"
            }
        ],
        "macro": []
    },
    "is_island": {
        "id": "is_island",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is an island, i.e. has no neighboring land province and no reachable province via a strait.",
                "scope": "Province",
                "example": "is_island = yes"
            }
        ],
        "macro": []
    },
    "is_league_enemy": {
        "id": "is_league_enemy",
        "value_types": [
            {
                "type": "Scope",
                "description": "Returns true if country X is league enemy of the country('s league).",
                "scope": "Country",
                "example": "is_league_enemy = ROOT"
            }
        ],
        "macro": []
    },
    "is_lacking_institutions": {
        "id": "is_lacking_institutions",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is lacking any institution.",
                "scope": "Country",
                "example": "is_lacking_institutions = yes"
            }
        ],
        "macro": []
    },
    "is_league_friend": {
        "id": "is_league_friend",
        "value_types": [
            {
                "type": "Scope",
                "description": "Returns true, if the country is in the same religious league as the specified country.",
                "scope": "Country",
                "example": "is_league_friend = ROOT"
            }
        ],
        "macro": []
    },
    "is_league_leader": {
        "id": "is_league_leader",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country leads a religious league.",
                "scope": "Country",
                "example": "is_league_leader = yes"
            }
        ],
        "macro": []
    },
    "is_lesser_in_union": {
        "id": "is_lesser_in_union",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is the lesser partner in a personal union.",
                "scope": "Country",
                "example": "is_lesser_in_union = no"
            }
        ],
        "macro": []
    },
    "is_looted": {
        "id": "is_looted",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is looted.",
                "scope": "Province",
                "example": "is_looted = yes"
            }
        ],
        "macro": []
    },
    "is_monarch_leader": {
        "id": "is_monarch_leader",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the rulerof the country is a general.\nNote: Proper localisation for the negation only with NOT = \u2026.",
                "scope": "Country",
                "example": "is_monarch_leader = yes"
            }
        ],
        "macro": []
    },
    "is_month": {
        "id": "is_month",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the current month is at least X (zero based).",
                "scope": "Anywhere",
                "example": "is_month = 1 # February"
            }
        ],
        "macro": []
    },
    "is_march": {
        "id": "is_march",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a march.",
                "scope": "Country",
                "example": "is_march = yes"
            }
        ],
        "macro": []
    },
    "is_neighbor_of": {
        "id": "is_neighbor_of",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is neighbor of X.",
                "scope": "Country",
                "example": "is_neighbor_of = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is neighbor of X.",
                "scope": "Country",
                "example": "is_neighbor_of = FRA"
            }
        ],
        "macro": []
    },
    "is_node_in_trade_company_region": {
        "id": "is_node_in_trade_company_region",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true, if the province's trade node is in a trade company region.",
                "scope": "Province",
                "example": "is_node_in_trade_company_region = yes"
            }
        ],
        "macro": []
    },
    "is_nomad": {
        "id": "is_nomad",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if country's government is nomadic.\n(Note: Only the Steppe Nomads government is flagged as nomadic.)",
                "scope": "Country",
                "example": "is_nomad = yes"
            }
        ],
        "macro": []
    },
    "is_orangists_in_power": {
        "id": "is_orangists_in_power",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if in the country the orangists are in power.",
                "scope": "Country",
                "example": "is_orangists_in_power = yes"
            }
        ],
        "macro": []
    },
    "is_origin_of_consort": {
        "id": "is_origin_of_consort",
        "value_types": [
            {
                "type": "Scope",
                "description": "Returns true if the specified country is the origin country of the scoped country\u2019s consort.",
                "scope": "Country",
                "example": "is_origin_of_consort = ROOT"
            },
            {
                "type": "Tag",
                "description": "Returns true if the specified country is the origin country of the scoped country\u2019s consort.",
                "scope": "Country",
                "example": "is_origin_of_consort = ROOT"
            }
        ],
        "macro": []
    },
    "is_overseas": {
        "id": "is_overseas",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is overseas",
                "scope": "Province",
                "example": "is_overseas = yes"
            }
        ],
        "macro": []
    },
    "is_overseas_subject": {
        "id": "is_overseas_subject",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the subject is overseas.",
                "scope": "Country (subject)",
                "example": "is_overseas_subject = yes"
            }
        ],
        "macro": []
    },
    "is_owned_by_trade_company": {
        "id": "is_owned_by_trade_company",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province belongs to a trade company.",
                "scope": "Province",
                "example": "is_owned_by_trade_company = yes"
            }
        ],
        "macro": []
    },
    "is_papal_controller": {
        "id": "is_papal_controller",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is the papal controller.",
                "scope": "Country",
                "example": "is_papal_controller = yes"
            }
        ],
        "macro": []
    },
    "is_part_of_hre": {
        "id": "is_part_of_hre",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country/province is part of the HRE.",
                "scope": "Country\nProvince",
                "example": "is_part_of_hre = yes"
            }
        ],
        "macro": []
    },
    "is_permanent_claim": {
        "id": "is_permanent_claim",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the province is a permanent claim of X.",
                "scope": "Province",
                "example": "is_permanent_claim = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province is a permanent claim of X.",
                "scope": "Province",
                "example": "is_permanent_claim = ROOT"
            }
        ],
        "macro": []
    },
    "is_playing_custom_nation": {
        "id": "is_playing_custom_nation",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a player-designed custom nation.",
                "scope": "Country",
                "example": "is_playing_custom_nation = yes"
            }
        ],
        "macro": []
    },
    "is_possible_march": {
        "id": "is_possible_march",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if vassal X is a possible march of the country.",
                "scope": "Country",
                "example": "is_possible_march = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if vassal X is a possible march of the country.",
                "scope": "Country",
                "example": "is_possible_march = ROOT"
            }
        ],
        "macro": []
    },
    "is_possible_vassal": {
        "id": "is_possible_vassal",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if country X is releasable as vassal of the country.",
                "scope": "Country",
                "example": "ENG = { is_possible_vassal = CRN }"
            },
            {
                "type": "Scope",
                "description": "Returns true if country X is releasable as vassal of the country.",
                "scope": "Country",
                "example": "ENG = { is_possible_vassal = CRN }"
            }
        ],
        "macro": []
    },
    "is_previous_papal_controller": {
        "id": "is_previous_papal_controller",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is the previous papal controller.",
                "scope": "Country",
                "example": "is_previous_papal_controller = yes"
            }
        ],
        "macro": []
    },
    "is_prosperous": {
        "id": "is_prosperous",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is prosperous. NOTE: Does not have a tooltip.",
                "scope": "Province",
                "example": "is_prosperous = yes"
            }
        ],
        "macro": []
    },
    "is_protectorate": {
        "id": "is_protectorate",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a protectorate",
                "scope": "Country",
                "example": "is_protectorate = yes"
            }
        ],
        "macro": []
    },
    "is_random_new_world": {
        "id": "is_random_new_world",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if playing with a random New World.",
                "scope": "Anywhere",
                "example": "is_random_new_world = no"
            }
        ],
        "macro": []
    },
    "is_reformation_center": {
        "id": "is_reformation_center",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is a reformation center.",
                "scope": "Global",
                "example": "is_reformation_center = no"
            }
        ],
        "macro": []
    },
    "is_religion_grant_colonial_claim": {
        "id": "is_religion_grant_colonial_claim",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province has been granted to any country, to no country or to a specific country.",
                "scope": "Province",
                "example": "is_religion_grant_colonial_claim = ROOT"
            },
            {
                "type": "Tag",
                "description": "Returns true if the province has been granted to any country, to no country or to a specific country.",
                "scope": "Province",
                "example": "is_religion_grant_colonial_claim = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province has been granted to any country, to no country or to a specific country.",
                "scope": "Province",
                "example": "is_religion_grant_colonial_claim = ROOT"
            }
        ],
        "macro": []
    },
    "is_religion_enabled": {
        "id": "is_religion_enabled",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the specified religion is enabled.",
                "scope": "Anywhere",
                "example": "is_religion_enabled = reformed"
            }
        ],
        "macro": []
    },
    "is_religion_reformed": {
        "id": "is_religion_reformed",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has reformed their religion.",
                "scope": "Country",
                "example": "is_religion_reformed = yes"
            }
        ],
        "macro": []
    },
    "is_revolution_target": {
        "id": "is_revolution_target",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is the revolution target.",
                "scope": "Country",
                "example": "is_revolution_target = yes"
            }
        ],
        "macro": []
    },
    "is_rival": {
        "id": "is_rival",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if country X is a rival of the country.",
                "scope": "Country",
                "example": "is_rival = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true if country X is a rival of the country.",
                "scope": "Country",
                "example": "is_rival = FRA"
            }
        ],
        "macro": []
    },
    "is_sea": {
        "id": "is_sea",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is sea.\nMostly used for trade nodes.",
                "scope": "Province",
                "example": "is_sea = yes"
            }
        ],
        "macro": []
    },
    "is_state": {
        "id": "is_state",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is in a state.",
                "scope": "Province",
                "example": "is_state = yes"
            }
        ],
        "macro": []
    },
    "is_state_core": {
        "id": "is_state_core",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true if the country has a state core on the province with the ID X.",
                "scope": "Country",
                "example": "is_state_core = 950"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country X has a state core on the province.",
                "scope": "Province",
                "example": "is_state_core = NED"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country X has a state core on the province.",
                "scope": "Province",
                "example": "is_state_core = NED"
            }
        ],
        "macro": []
    },
    "is_statists_in_power": {
        "id": "is_statists_in_power",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if in the country the statists are in power.",
                "scope": "Province",
                "example": "is_statists_in_power = yes"
            }
        ],
        "macro": []
    },
    "is_strongest_trade_power": {
        "id": "is_strongest_trade_power",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the specified country has the most trade power in the area.",
                "scope": "Province\n(Trade node)",
                "example": "is_strongest_trade_power = POR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the specified country has the most trade power in the area.",
                "scope": "Province\n(Trade node)",
                "example": "is_strongest_trade_power = POR"
            }
        ],
        "macro": []
    },
    "is_subject": {
        "id": "is_subject",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a subject.",
                "scope": "Country",
                "example": "is_subject = yes"
            }
        ],
        "macro": []
    },
    "is_subject_of": {
        "id": "is_subject_of",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is a subject of X.",
                "scope": "Country",
                "example": "is_subject_of = FRA"
            }
        ],
        "macro": []
    },
    "is_subject_of_type": {
        "id": "is_subject_of_type",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country is a subject of subject type.",
                "scope": "Country",
                "example": "is_subject_of_type = tributary_state"
            }
        ],
        "macro": []
    },
    "is_territorial_core": {
        "id": "is_territorial_core",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true if the country has a territorial core on the province with the ID X.",
                "scope": "Country",
                "example": "is_territorial_core = 950"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country X has a territorial core on the province.",
                "scope": "Province",
                "example": "is_territorial_core = NED"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country X has a territorial core on the province.",
                "scope": "Province",
                "example": "is_territorial_core = NED"
            }
        ],
        "macro": []
    },
    "is_territory": {
        "id": "is_territory",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is in a territory.",
                "scope": "Province",
                "example": "is_territory = no"
            }
        ],
        "macro": []
    },
    "is_threat": {
        "id": "is_threat",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if country X is threatened by the country.",
                "scope": "Country",
                "example": "is_threat = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if country X is threatened by the country.",
                "scope": "Country",
                "example": "is_threat = ROOT"
            }
        ],
        "macro": []
    },
    "is_trade_league_leader": {
        "id": "is_trade_league_leader",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is the leader of a trade league.",
                "scope": "Country",
                "example": "is_trade_league_leader = yes"
            }
        ],
        "macro": []
    },
    "is_tribal": {
        "id": "is_tribal",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has a tribal government.\n(Note: Government types that allow migration are not considered tribal.)",
                "scope": "Country",
                "example": "is_tribal = yes"
            }
        ],
        "macro": []
    },
    "is_vassal": {
        "id": "is_vassal",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a vassal.",
                "scope": "Country",
                "example": "is_vassal = yes"
            }
        ],
        "macro": []
    },
    "is_variable_equal": {
        "id": "is_variable_equal",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the specified variable is equal to X.",
                "scope": "",
                "example": "is_variable_equal = {\n which = myvar\n value = 5\n}"
            }
        ],
        "macro": []
    },
    "is_wasteland": {
        "id": "is_wasteland",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is wasteland.",
                "scope": "Province",
                "example": "is_wasteland = yes"
            }
        ],
        "macro": []
    },
    "is_year": {
        "id": "is_year",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the current year is at least X.",
                "scope": "Anywhere",
                "example": "is_year = 1750"
            }
        ],
        "macro": []
    },
    "island": {
        "id": "island",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is an island, i.e. has no neighboring land provinces.",
                "scope": "Province",
                "example": "island = yes"
            }
        ],
        "macro": []
    },
    "isolationism": {
        "id": "isolationism",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has an isolationism level of at least X.",
                "scope": "Country",
                "example": "isolationism = 2"
            }
        ],
        "macro": []
    },
    "janissary_percentage": {
        "id": "janissary_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has an army of at least X k janissaries.\nAvailable only with the Cradle of Civilization DLC enabled.",
                "scope": "Country",
                "example": "janissary_percentage = 0.3"
            }
        ],
        "macro": []
    },
    "junior_union_with": {
        "id": "junior_union_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is the junior partner in a personal union under country X.",
                "scope": "Country",
                "example": "junior_union_with = ENG"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is the junior partner in a personal union under country X.",
                "scope": "Country",
                "example": "junior_union_with = ENG"
            }
        ],
        "macro": []
    },
    "karma": {
        "id": "karma",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a karma of at least X.",
                "scope": "Country",
                "example": "karma = -50"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much karma as the specified country.",
                "scope": "Country",
                "example": "karma = DAI"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much karma as the specified country.",
                "scope": "Country",
                "example": "karma = DAI"
            }
        ],
        "macro": []
    },
    "knows_country": {
        "id": "knows_country",
        "value_types": [
            {
                "type": "Tag.Scope",
                "description": "Returns true if the country has knowledge of country X.",
                "scope": "Country",
                "example": "knows_country = INC"
            }
        ],
        "macro": []
    },
    "land_forcelimit": {
        "id": "land_forcelimit",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a land force limit of at least X.",
                "scope": "Country",
                "example": "land_forcelimit = 32"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has a land force limit of at least as much regiments than the specified country.",
                "scope": "Country",
                "example": "land_forcelimit = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has a land force limit of at least as much regiments than the specified country.",
                "scope": "Country",
                "example": "land_forcelimit = ROOT"
            }
        ],
        "macro": []
    },
    "land_maintenance": {
        "id": "land_maintenance",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has set its land maintenance to X.",
                "scope": "Country",
                "example": "land_maintenance = 0.90"
            }
        ],
        "macro": []
    },
    "land_morale": {
        "id": "land_morale",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has a morale of armies of at least X.",
                "scope": "Country",
                "example": "land_morale = 3.5"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has an at least as high morale of armies as the specified country.",
                "scope": "Country",
                "example": "land_morale = PRU"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has an at least as high morale of armies as the specified country.",
                "scope": "Country",
                "example": "land_morale = PRU"
            }
        ],
        "macro": []
    },
    "last_mission": {
        "id": "last_mission",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the last mission of the country was the specified mission.",
                "scope": "Country",
                "example": "NOT = { last_mission = conquer_finland }"
            }
        ],
        "macro": []
    },
    "legitimacy": {
        "id": "legitimacy",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X legitimacy.",
                "scope": "Country",
                "example": "legitimacy = 100"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much legitimacy as the specified country.",
                "scope": "Country",
                "example": "legitimacy = ENG"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much legitimacy as the specified country.",
                "scope": "Country",
                "example": "legitimacy = ENG"
            }
        ],
        "macro": []
    },
    "legitimacy_equivalent": {
        "id": "legitimacy_equivalent",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country's legitimacy equivalent (legitimacy, republican tradition, devotion, horde unity, meritocracy etc.) is at least X.",
                "scope": "Country",
                "example": "legitimacy_equivalent = 80"
            },
            {
                "type": "Tag",
                "description": "Returns true, if the country has at least as much legitimacy equivalent (legitimacy, republican tradition, devotion, horde unity, meritocracy etc.) as the specified country.",
                "scope": "Country",
                "example": "legitimacy_equivalent = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country has at least as much legitimacy equivalent (legitimacy, republican tradition, devotion, horde unity, meritocracy etc.) as the specified country.",
                "scope": "Country",
                "example": "legitimacy_equivalent = FRA"
            }
        ],
        "macro": []
    },
    "legitimacy_or_horde_unity": {
        "id": "legitimacy_or_horde_unity",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X legitimacy or horde unity.",
                "scope": "Country",
                "example": "legitimacy_or_horde_unity = 90"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much legitimacy or horde unity as the specified country.",
                "scope": "Country",
                "example": "legitimacy_or_horde_unity = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much legitimacy or horde unity as the specified country.",
                "scope": "Country",
                "example": "legitimacy_or_horde_unity = ROOT"
            }
        ],
        "macro": []
    },
    "liberty_desire": {
        "id": "liberty_desire",
        "value_types": [
            {
                "type": "Integer",
                "description": "Return true if the subject has a liberty desire of at least X.",
                "scope": "Country (subject)",
                "example": "liberty_desire = 50"
            }
        ],
        "macro": []
    },
    "light_ship_fraction": {
        "id": "light_ship_fraction",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of the light ship fraction to the navy size of the country is at least X.",
                "scope": "Country",
                "example": "light_ship_fraction = 0.3"
            }
        ],
        "macro": []
    },
    "light_ships_in_province": {
        "id": "light_ships_in_province",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X light ships in the province.",
                "scope": "Province",
                "example": "light_ships_in_province = 10"
            },
            {
                "type": "Tag",
                "description": "Returns true if there are light ships from the specified country in the province.",
                "scope": "Province",
                "example": "light_ships_in_province = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if there are light ships from the specified country in the province.",
                "scope": "Province",
                "example": "light_ships_in_province = ROOT"
            }
        ],
        "macro": []
    },
    "likely_rebels": {
        "id": "likely_rebels",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province has the specified rebel faction as likely rebels.",
                "scope": "Province",
                "example": "likely_rebels = revolutionary_rebels"
            }
        ],
        "macro": []
    },
    "local_autonomy": {
        "id": "local_autonomy",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the province has a local autonomy of at least X.",
                "scope": "Province",
                "example": "local_autonomy = 50"
            }
        ],
        "macro": []
    },
    "local_autonomy_above_min": {
        "id": "local_autonomy_above_min",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true, if the province's local autonomy is at least X above the local development's minimun value.",
                "scope": "Province",
                "example": "local_autonomy_above_min = 10"
            }
        ],
        "macro": []
    },
    "luck": {
        "id": "luck",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is a lucky nation. (AI controlled counties only.)",
                "scope": "Country",
                "example": "luck = yes"
            }
        ],
        "macro": []
    },
    "march_of": {
        "id": "march_of",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is a march under country X.",
                "scope": "Country",
                "example": "march_of = PAP"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is a march under country X.",
                "scope": "Country",
                "example": "march_of = PAP"
            }
        ],
        "macro": []
    },
    "manpower": {
        "id": "manpower",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least available manpower.",
                "scope": "Country",
                "example": "manpower = 22"
            }
        ],
        "macro": []
    },
    "manpower_percentage": {
        "id": "manpower_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has a manpower level of at least X%.",
                "scope": "Country",
                "example": "manpower_percentage = 0.50"
            }
        ],
        "macro": []
    },
    "marriage_with": {
        "id": "marriage_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country has a royal marriage with X.",
                "scope": "Country",
                "example": "marriage_with = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has a royal marriage with X.",
                "scope": "Country",
                "example": "marriage_with = ROOT"
            }
        ],
        "macro": []
    },
    "max_manpower": {
        "id": "max_manpower",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least maximum manpower.",
                "scope": "Country",
                "example": "max_manpower = 5"
            }
        ],
        "macro": []
    },
    "mercantilism": {
        "id": "mercantilism",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country's mercantilism is at least X.",
                "scope": "Country",
                "example": "mercantilism = 5"
            }
        ],
        "macro": []
    },
    "meritocracy": {
        "id": "meritocracy",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has a meritocracy value of at least X.",
                "scope": "Country",
                "example": "meritocracy = 80"
            }
        ],
        "macro": []
    },
    "mil": {
        "id": "mil",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if cthe ountry has a ruler with a military skill of at least X.",
                "scope": "Country",
                "example": "mil = 6"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has a ruler with at least as high military skill as the ruler of the specified country.",
                "scope": "Country",
                "example": "dip = HJO"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has a ruler with at least as high military skill as the ruler of the specified country.",
                "scope": "Country",
                "example": "dip = HJO"
            }
        ],
        "macro": []
    },
    "militarised_society": {
        "id": "militarised_society",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a militarization of country of at least X.",
                "scope": "Country",
                "example": "militarized_society = 20"
            }
        ],
        "macro": []
    },
    "mil_power": {
        "id": "mil_power",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X military power.",
                "scope": "Country",
                "example": "mil_power = 333"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much military power than the specified country.",
                "scope": "Country",
                "example": "mil_power = MAM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much military power than the specified country.",
                "scope": "Country",
                "example": "mil_power = MAM"
            }
        ],
        "macro": []
    },
    "mil_tech": {
        "id": "mil_tech",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has an military technology of at least level X.",
                "scope": "Country",
                "example": "mil_tech = 4"
            }
        ],
        "macro": []
    },
    "mission_completed": {
        "id": "mission_completed",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has completed mission X.",
                "scope": "Country",
                "example": "mission_completed = eng_mighty_army"
            }
        ],
        "macro": []
    },
    "monthly_income": {
        "id": "monthly_income",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a monthly income of at least X.",
                "scope": "Country",
                "example": "monthly_income = 5"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has an at least as high monthly income as the specified country.",
                "scope": "Country",
                "example": "monthly_income = MAM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has an at least as high monthly income as the specified country.",
                "scope": "Country",
                "example": "monthly_income = MAM"
            }
        ],
        "macro": []
    },
    "months_of_ruling": {
        "id": "months_of_ruling",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a ruler that has ruled for at least X months.",
                "scope": "Country",
                "example": "months_of_ruling = 12"
            }
        ],
        "macro": []
    },
    "months_since_defection": {
        "id": "months_since_defection",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the province defected within the last X months.",
                "scope": "Province",
                "example": "months_since_defection = 12"
            }
        ],
        "macro": []
    },
    "military_strength": {
        "id": "military_strength",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true, if the country's military strength (army size & navy size combined) is at least the size of X times the military strength of the specified country",
                "scope": "Country",
                "example": "military_strength = {\n who = FROM\n value = 2.0\n}"
            }
        ],
        "macro": []
    },
    "nationalism": {
        "id": "nationalism",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if province has at least X years of separatism remaining.",
                "scope": "Province",
                "example": "nationalism = 5"
            }
        ],
        "macro": []
    },
    "national_focus": {
        "id": "national_focus",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if country has set the national focus to X.",
                "scope": "Country",
                "example": "national_focus = ADM"
            }
        ],
        "macro": []
    },
    "nation_designer_points": {
        "id": "nation_designer_points",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if at least X points were used when creating the custom nation.",
                "scope": "Country",
                "example": "nation_designer_points = 802"
            }
        ],
        "macro": []
    },
    "native_ferocity": {
        "id": "native_ferocity",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if ferocity of natives in the province is at least X.",
                "scope": "Province",
                "example": "native_ferocity = 3"
            }
        ],
        "macro": []
    },
    "native_hostileness": {
        "id": "native_hostileness",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if hostileness of natives in the province is at least X.",
                "scope": "Province",
                "example": "native_hostileness = 2"
            }
        ],
        "macro": []
    },
    "native_size": {
        "id": "native_size",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if size of natives in the province is at least X.",
                "scope": "Province",
                "example": "native_size = 30"
            }
        ],
        "macro": []
    },
    "naval_forcelimit": {
        "id": "naval_forcelimit",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a naval force limit of at least X.",
                "scope": "Country",
                "example": "naval_forcelimit = 24"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has a naval force limit of at least as much ships than the specified country.",
                "scope": "Country",
                "example": "naval_forcelimit = SWE"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has a naval force limit of at least as much ships than the specified country.",
                "scope": "Country",
                "example": "naval_forcelimit = SWE"
            }
        ],
        "macro": []
    },
    "naval_maintenance": {
        "id": "naval_maintenance",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country's naval maintenance slider is at least X fraction of maximum.",
                "scope": "Country",
                "example": "naval_maintenance = 0.33"
            }
        ],
        "macro": []
    },
    "naval_morale": {
        "id": "naval_morale",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has a morale of navies of at least X.",
                "scope": "Country",
                "example": "naval_morale = 2.5"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has an at least as high morale of navies as the specified country.",
                "scope": "Country",
                "example": "naval_morale = GBR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has an at least as high morale of navies as the specified country.",
                "scope": "Country",
                "example": "naval_morale = GBR"
            }
        ],
        "macro": []
    },
    "navy_size": {
        "id": "navy_size",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the current scope has a navy of at least X ships.",
                "scope": "Country",
                "example": "navy_size = 300"
            },
            {
                "type": "Tag",
                "description": "Returns true if the current scope has a navy at least as large as the specified country.",
                "scope": "Country",
                "example": "navy_size = SPA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the current scope has a navy at least as large as the specified country.",
                "scope": "Country",
                "example": "navy_size = SPA"
            }
        ],
        "macro": []
    },
    "navy_size_percentage": {
        "id": "navy_size_percentage",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the ratio of the total navy size of the country to its naval force limit is at least X.",
                "scope": "Country",
                "example": "navy_size_percentage = 0.50"
            }
        ],
        "macro": []
    },
    "naval_strength": {
        "id": "naval_strength",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true, if the country's navy size is at least the size of X times the navy size of the specified country.",
                "scope": "Country",
                "example": "naval_strength = {\n who = ENG\n value = 0.5\n}"
            }
        ],
        "macro": []
    },
    "navy_tradition": {
        "id": "navy_tradition",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a navy tradition of at least X.",
                "scope": "Country",
                "example": "navy_tradition = 95"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has an at least as high navy tradition as specified country.",
                "scope": "Country",
                "example": "navy_tradition = GBR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has an at least as high navy tradition as specified country.",
                "scope": "Country",
                "example": "navy_tradition = GBR"
            }
        ],
        "macro": []
    },
    "normal_or_historical_nations": {
        "id": "normal_or_historical_nations",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if game is set to use normal or historical nations.",
                "scope": "Anywhere",
                "example": "normal_or_historical_nations = yes"
            }
        ],
        "macro": []
    },
    "normal_province_values": {
        "id": "normal_province_values",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if game is set to use normal province values.",
                "scope": "Anywhere",
                "example": "normal_province_values = yes"
            }
        ],
        "macro": []
    },
    "num_accepted_cultures": {
        "id": "num_accepted_cultures",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has at least X accepted cultures.",
                "scope": "Country",
                "example": "num_accepted_cultures = 1"
            }
        ],
        "macro": []
    },
    "num_free_building_slots": {
        "id": "num_free_building_slots",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the province has at least X building slots remaining.",
                "scope": "Province",
                "example": "num_free_building_slots = 1"
            }
        ],
        "macro": []
    },
    "num_of_active_blessings": {
        "id": "num_of_active_blessings",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has enabled at least X blessings.",
                "scope": "Country",
                "example": "num_of_active_blessings = 5"
            }
        ],
        "macro": []
    },
    "num_of_admirals": {
        "id": "num_of_admirals",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X admirals.",
                "scope": "Country",
                "example": "num_of_admirals = 2"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much admirals than the specified country.",
                "scope": "Country",
                "example": "num_of_admirals = SPA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much admirals than the specified country.",
                "scope": "Country",
                "example": "num_of_admirals = SPA"
            }
        ],
        "macro": []
    },
    "num_of_admirals_with_traits": {
        "id": "num_of_admirals_with_traits",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X admirals with traits.",
                "scope": "Country",
                "example": "num_of_admirals_with_traits = 1"
            }
        ],
        "macro": []
    },
    "num_of_allies": {
        "id": "num_of_allies",
        "value_types": [
            {
                "type": "Integer",
                "description": "Return true if the country has at least X allies.",
                "scope": "Country",
                "example": "num_of_allies = 7"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much allies than the specified country.",
                "scope": "Country",
                "example": "num_of_allies = ARA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much allies than the specified country.",
                "scope": "Country",
                "example": "num_of_allies = ARA"
            }
        ],
        "macro": []
    },
    "num_of_artillery": {
        "id": "num_of_artillery",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X artillery regiments.",
                "scope": "Country",
                "example": "num_of_artillery = 12"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much artillery regiments than the specified country.",
                "scope": "Country",
                "example": "num_of_artillery = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much artillery regiments than the specified country.",
                "scope": "Country",
                "example": "num_of_artillery = FRA"
            }
        ],
        "macro": []
    },
    "num_of_aspects": {
        "id": "num_of_aspects",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X church aspects.",
                "scope": "Country",
                "example": "num_of_aspects = 2"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much church aspects than the specified country.",
                "scope": "Country",
                "example": "num_of_aspects = SWE"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much church aspects than the specified country.",
                "scope": "Country",
                "example": "num_of_aspects = SWE"
            }
        ],
        "macro": []
    },
    "num_of_banners": {
        "id": "num_of_banners",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has at least X banner units.",
                "scope": "Country",
                "example": "num_of_banners = 3"
            }
        ],
        "macro": []
    },
    "num_of_captured_ships_with_boarding_doctrine": {
        "id": "num_of_captured_ships_with_boarding_doctrine",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has captured at least X ships while having the \u2018Ship Boarding\u2019 naval doctrine.",
                "scope": "Country",
                "example": "num_of_captured_ships_with_boarding_doctrine = 20"
            }
        ],
        "macro": []
    },
    "num_of_cardinals": {
        "id": "num_of_cardinals",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X cardinals in the Holy See.",
                "scope": "Country",
                "example": "num_of_cardinals = 3"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much cardinals than the specified country.",
                "scope": "Country",
                "example": "num_of_cardinals = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much cardinals than the specified country.",
                "scope": "Country",
                "example": "num_of_cardinals = FRA"
            }
        ],
        "macro": []
    },
    "num_of_cavalry": {
        "id": "num_of_cavalry",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X cavalry regiments.",
                "scope": "Country",
                "example": "num_of_cavalry = 23"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much cavalry regiments than the specified country.",
                "scope": "Country",
                "example": "num_of_cavalry = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much cavalry regiments than the specified country.",
                "scope": "Country",
                "example": "num_of_cavalry = FRA"
            }
        ],
        "macro": []
    },
    "num_of_cities": {
        "id": "num_of_cities",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country owns at least X cities.",
                "scope": "Country",
                "example": "num_of_cities = 15"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country owns at least as much cities than the specified country.",
                "scope": "Country",
                "example": "num_of_cities = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country owns at least as much cities than the specified country.",
                "scope": "Country",
                "example": "num_of_cities = ROOT"
            }
        ],
        "macro": []
    },
    "num_of_coalition_members": {
        "id": "num_of_coalition_members",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country is in a coalition of at least X members.",
                "scope": "Country",
                "example": "num_of_coalition_members = 6"
            }
        ],
        "macro": []
    },
    "num_of_colonies": {
        "id": "num_of_colonies",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X unfinished colonies.",
                "scope": "Country",
                "example": "num_of_colonies = 2"
            }
        ],
        "macro": []
    },
    "num_of_colonists": {
        "id": "num_of_colonists",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X colonists.",
                "scope": "Country",
                "example": "num_of_colonists = 2"
            }
        ],
        "macro": []
    },
    "num_of_conquistadors": {
        "id": "num_of_conquistadors",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X conquistadors.",
                "scope": "Country",
                "example": "num_of_conquistadors = 2"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much conquistadors than the specified country.",
                "scope": "Country",
                "example": "num_of_conquistadors = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much conquistadors than the specified country.",
                "scope": "Country",
                "example": "num_of_conquistadors = ROOT"
            }
        ],
        "macro": []
    },
    "num_of_consorts": {
        "id": "num_of_consorts",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the ruler of the country had at least X separate consorts.",
                "scope": "Country",
                "example": "num_of_consorts = 6"
            }
        ],
        "macro": []
    },
    "num_of_continents": {
        "id": "num_of_continents",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country owns provinces on at least X continents. Only provinces owned by the country itself are taken into account, not provinces owned by subjects.",
                "scope": "Country",
                "example": "num_of_continents = 3"
            }
        ],
        "macro": []
    },
    "num_of_cossacks": {
        "id": "num_of_cossacks",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has at least X cossack units.",
                "scope": "Country",
                "example": "num_of_cossacks = 3"
            }
        ],
        "macro": []
    },
    "num_of_custom_nations": {
        "id": "num_of_custom_nations",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X custom nations in the game.",
                "scope": "Country",
                "example": "num_of_custom_nations = 1"
            }
        ],
        "macro": []
    },
    "num_of_diplomatic_relations": {
        "id": "num_of_diplomatic_relations",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X diplomatic relations.",
                "scope": "Country",
                "example": "num_of_diplomatic_relations = 3"
            }
        ],
        "macro": []
    },
    "num_of_diplomats": {
        "id": "num_of_diplomats",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X diplomats.",
                "scope": "Country",
                "example": "num_of_diplomats = 2"
            }
        ],
        "macro": []
    },
    "num_of_electors": {
        "id": "num_of_electors",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X electors of the HRE.",
                "scope": "Anywhere",
                "example": "num_of_electors = 7"
            }
        ],
        "macro": []
    },
    "num_of_estate_privileges": {
        "id": "num_of_estate_privileges",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has granted at least X privileges to the specified estate.",
                "scope": "Country",
                "example": "num_of_estate_privileges = {\n estate = estate_brahmins\n value = 2\n}"
            }
        ],
        "macro": []
    },
    "num_of_explorers": {
        "id": "num_of_explorers",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X explorers.",
                "scope": "Country",
                "example": "num_of_explorers = 1"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much explorers than the specified country.",
                "scope": "Country",
                "example": "num_of_explorers = ENG"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much explorers than the specified country.",
                "scope": "Country",
                "example": "num_of_explorers = ENG"
            }
        ],
        "macro": []
    },
    "num_of_foreign_hre_provinces": {
        "id": "num_of_foreign_hre_provinces",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X provinces owned by non-member states or subjects of non-member states.",
                "scope": "Anywhere",
                "example": "num_of_foreign_hre_provinces = 2"
            }
        ],
        "macro": []
    },
    "num_of_free_diplomatic_relations": {
        "id": "num_of_free_diplomatic_relations",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X free diplomatic relations slots.",
                "scope": "Country",
                "example": "num_of_free_diplomatic_relations = 1"
            }
        ],
        "macro": []
    },
    "num_of_galley": {
        "id": "num_of_galley",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X galleys.",
                "scope": "Country",
                "example": "num_of_galley = 20"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much galleys than the specified country.",
                "scope": "Country",
                "example": "num_of_galley = VEN"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much galleys than the specified country.",
                "scope": "Country",
                "example": "num_of_galley = VEN"
            }
        ],
        "macro": []
    },
    "num_of_generals": {
        "id": "num_of_generals",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X generals.",
                "scope": "Country",
                "example": "num_of_generals = 2"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much generals than the specified country.",
                "scope": "Country",
                "example": "num_of_generals = FROM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much generals than the specified country.",
                "scope": "Country",
                "example": "num_of_generals = FROM"
            }
        ],
        "macro": []
    },
    "num_of_generals_with_traits": {
        "id": "num_of_generals_with_traits",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X generals with traits.",
                "scope": "Country",
                "example": "num_of_generals_with_traits = 1"
            }
        ],
        "macro": []
    },
    "num_of_harmonized": {
        "id": "num_of_harmonized",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has harmonized with at least X religions or religion groups.",
                "scope": "Country",
                "example": "num_of_harmonized = 2"
            }
        ],
        "macro": []
    },
    "num_of_heavy_ship": {
        "id": "num_of_heavy_ship",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X heavy ships.",
                "scope": "Country",
                "example": "num_of_heavy_ship = 20"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much heavy ships than the specified country.",
                "scope": "Country",
                "example": "num_of_heavy_ship = ENG"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much heavy ships than the specified country.",
                "scope": "Country",
                "example": "num_of_heavy_ship = ENG"
            }
        ],
        "macro": []
    },
    "num_of_infantry": {
        "id": "num_of_infantry",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X infantry regiments.",
                "scope": "Country",
                "example": "num_of_infantry = 300"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much infantry regiments than the specified country.",
                "scope": "Country",
                "example": "num_of_infantry = FROM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much infantry regiments than the specified country.",
                "scope": "Country",
                "example": "num_of_infantry = FROM"
            }
        ],
        "macro": []
    },
    "num_of_light_ship": {
        "id": "num_of_light_ship",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X light ships.",
                "scope": "Country",
                "example": "num_of_light_ship = 20"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much light ships than the specified country.",
                "scope": "Country",
                "example": "num_of_light_ship = GEN"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much light ships than the specified country.",
                "scope": "Country",
                "example": "num_of_light_ship = GEN"
            }
        ],
        "macro": []
    },
    "num_of_loans": {
        "id": "num_of_loans",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X loans.",
                "scope": "Country",
                "example": "num_of_loans = 15"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has taken at least as much loans than the specified country.",
                "scope": "Country",
                "example": "num_of_loans = LIT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has taken at least as much loans than the specified country.",
                "scope": "Country",
                "example": "num_of_loans = LIT"
            }
        ],
        "macro": []
    },
    "num_of_marches": {
        "id": "num_of_marches",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X marches.",
                "scope": "Country",
                "example": "num_of_marches = 2"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much marches than the specified country.",
                "scope": "Country",
                "example": "num_of_marches = POL"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much marches than the specified country.",
                "scope": "Country",
                "example": "num_of_marches = POL"
            }
        ],
        "macro": []
    },
    "num_of_mercenaries": {
        "id": "num_of_mercenaries",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X mercenaries.",
                "scope": "Country",
                "example": "num_of_mercenaries = 10"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much mercenaries than the specified country.",
                "scope": "Country",
                "example": "num_of_mercenaries = TUR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much mercenaries than the specified country.",
                "scope": "Country",
                "example": "num_of_mercenaries = TUR"
            }
        ],
        "macro": []
    },
    "num_of_merchants": {
        "id": "num_of_merchants",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X merchants.",
                "scope": "Country",
                "example": "num_of_merchants = 3"
            }
        ],
        "macro": []
    },
    "num_of_missionaries": {
        "id": "num_of_missionaries",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X missionaries.",
                "scope": "Country",
                "example": "num_of_missionaries = 2"
            }
        ],
        "macro": []
    },
    "num_of_owned_and_controlled_institutions": {
        "id": "num_of_owned_and_controlled_institutions",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country owns and controls at least X provinces that are institution origins.",
                "scope": "Country",
                "example": "num_of_owned_and_controlled_institutions = 2"
            }
        ],
        "macro": []
    },
    "num_of_owned_provinces_with": {
        "id": "num_of_owned_provinces_with",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if at least X provinces of the scoped country match the specified condition(s).",
                "scope": "Country",
                "example": "num_of_owned_provinces_with = {\n value = 15\n has_owner_accepted_culture = no\n NOT = { culture = root }\n is_overseas = no\n}"
            }
        ],
        "macro": []
    },
    "num_of_ports": {
        "id": "num_of_ports",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if country owns at least X home ports (in lands contiguously connected to the capital).",
                "scope": "Country",
                "example": "num_of_ports = 20"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much home ports than the specified country.",
                "scope": "Country",
                "example": "num_of_ports = MNG"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much home ports than the specified country.",
                "scope": "Country",
                "example": "num_of_ports = MNG"
            }
        ],
        "macro": []
    },
    "num_of_ports_blockading": {
        "id": "num_of_ports_blockading",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country blockades at least X ports.",
                "scope": "Country",
                "example": "num_of_ports_blockading = 10"
            }
        ],
        "macro": []
    },
    "num_of_powerful_estates": {
        "id": "num_of_powerful_estates",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X estates with at least 70 influence.",
                "scope": "Country",
                "example": "num_of_powerful_estates = 2"
            }
        ],
        "macro": []
    },
    "num_of_protectorates": {
        "id": "num_of_protectorates",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X protectorates.",
                "scope": "Country",
                "example": "num_of_protectorates = 2"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much protectorates than the specified country.",
                "scope": "Country",
                "example": "num_of_protectorates = POR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much protectorates than the specified country.",
                "scope": "Country",
                "example": "num_of_protectorates = POR"
            }
        ],
        "macro": []
    },
    "num_of_provinces_in_states": {
        "id": "num_of_provinces_in_states",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X provinces is states.",
                "scope": "Country",
                "example": "num_of_provinces_in_states = 14"
            }
        ],
        "macro": []
    },
    "num_of_provinces_in_territories": {
        "id": "num_of_provinces_in_territories",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X provinces is territories.",
                "scope": "Country",
                "example": "num_of_provinces_in_territories = 12"
            }
        ],
        "macro": []
    },
    "num_of_provinces_owned_or_owned_by_non_sovereign_subjects_with": {
        "id": "num_of_provinces_owned_or_owned_by_non_sovereign_subjects_with",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if there are at least X provinces that fulfil the declared conditions owned by the country and its non-tributary subjects.",
                "scope": "Country",
                "example": "num_of_provinces_owned_or_owned_by_non_sovereign_subjects_with = {\n value = 1\n colonial_region = colonial_the_carribean\n is_city = yes\n}"
            }
        ],
        "macro": []
    },
    "num_of_rebel_armies": {
        "id": "num_of_rebel_armies",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the number of rebel armies in the country is at least X.",
                "scope": "Country",
                "example": "num_of_rebel_armies = 3"
            },
            {
                "type": "Tag",
                "description": "Returns true if there are at least as much rebel armies in the country than the specified country.",
                "scope": "Country",
                "example": "num_of_rebel_armies = SWI"
            },
            {
                "type": "Scope",
                "description": "Returns true if there are at least as much rebel armies in the country than the specified country.",
                "scope": "Country",
                "example": "num_of_rebel_armies = SWI"
            }
        ],
        "macro": []
    },
    "num_of_rebel_controlled_provinces": {
        "id": "num_of_rebel_controlled_provinces",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the number of rebel controlled provinces in the country is at least X.",
                "scope": "Country",
                "example": "num_of_rebel_controlled_provinces = 3"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much rebel controlled provinces than the specified country.",
                "scope": "Country",
                "example": "num_of_rebel_controlled_provinces = TIM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much rebel controlled provinces than the specified country.",
                "scope": "Country",
                "example": "num_of_rebel_controlled_provinces = TIM"
            }
        ],
        "macro": []
    },
    "num_of_religion": {
        "id": "num_of_religion",
        "value_types": [
            {
                "type": "Clause",
                "description": "Float value: Returns true if the ratio of the provinces with the specified religion to the total provinces of the country is at least X.\nInteger value: Returns true if the country has at least X provinces with the specified religion.\nIt is also possible to specify the secondary religion by secondary = yes.",
                "scope": "Country",
                "example": "num_of_religion = {\n religion = animism\n value = 0.3\n}"
            }
        ],
        "macro": []
    },
    "num_of_revolts": {
        "id": "num_of_revolts",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the number of revolts in the country is at least X.\nThe same as \u2018num_of_rebel_controlled_provinces\u2019.",
                "scope": "Country",
                "example": "num_of_revolts = 3"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much rebel controlled provinces than the specified country.",
                "scope": "Country",
                "example": "num_of_revolts = TIM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much rebel controlled provinces than the specified country.",
                "scope": "Country",
                "example": "num_of_revolts = TIM"
            }
        ],
        "macro": []
    },
    "num_of_royal_marriages": {
        "id": "num_of_royal_marriages",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X royal marriages.",
                "scope": "Country",
                "example": "num_of_royal_marriages = 2"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much royal marriages than the specified country.",
                "scope": "Country",
                "example": "num_of_royal_marriages = ENG"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much royal marriages than the specified country.",
                "scope": "Country",
                "example": "num_of_royal_marriages = ENG"
            }
        ],
        "macro": []
    },
    "num_of_states": {
        "id": "num_of_states",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X states.",
                "scope": "Country",
                "example": "num_of_states = 8"
            }
        ],
        "macro": []
    },
    "num_of_streltsy": {
        "id": "num_of_streltsy",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has at least X streltsy units.",
                "scope": "Country",
                "example": "num_of_streltsy = 3"
            }
        ],
        "macro": []
    },
    "num_of_strong_trade_companies": {
        "id": "num_of_strong_trade_companies",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X strong trade companies.",
                "scope": "Country",
                "example": "num_of_strong_trade_companies = 4"
            }
        ],
        "macro": []
    },
    "num_of_subjects": {
        "id": "num_of_subjects",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country is the overlord of at least X subject countries of any type.",
                "scope": "Country",
                "example": "num_of_subjects = 1"
            }
        ],
        "macro": []
    },
    "num_of_territories": {
        "id": "num_of_territories",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has at least X territories (areas that aren't states).",
                "scope": "Country",
                "example": "num_of_territories = 10"
            }
        ],
        "macro": []
    },
    "num_of_times_improved": {
        "id": "num_of_times_improved",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the development of the province was improved at least X times.",
                "scope": "Province",
                "example": "num_of_times_improved = 5"
            }
        ],
        "macro": []
    },
    "num_of_times_improved_by_owner": {
        "id": "num_of_times_improved_by_owner",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the development of the province was improved at least X times by the current owner.",
                "scope": "Province",
                "example": "num_of_times_improved_by_owner = 5"
            }
        ],
        "macro": []
    },
    "num_of_total_ports": {
        "id": "num_of_total_ports",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country owns at least X total ports (anywhere in the world).",
                "scope": "Country",
                "example": "num_of_total_ports = 20"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country owns at least as much total ports than the specified country.",
                "scope": "Country",
                "example": "num_of_total_ports = JAP"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country owns at least as much total ports than the specified country.",
                "scope": "Country",
                "example": "num_of_total_ports = JAP"
            }
        ],
        "macro": []
    },
    "num_of_trade_embargos": {
        "id": "num_of_trade_embargos",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X trade embargos.",
                "scope": "Country",
                "example": "num_of_trade_embargos = 3"
            }
        ],
        "macro": []
    },
    "num_of_trading_bonuses": {
        "id": "num_of_trading_bonuses",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country hasat least X \u2018trading in\u2019 bonuses.",
                "scope": "Country",
                "example": "num_of_trading_bonuses = 7"
            }
        ],
        "macro": []
    },
    "num_of_transport": {
        "id": "num_of_transport",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X transports.",
                "scope": "Country",
                "example": "num_of_transport = 24"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much transports than the specified country.",
                "scope": "Country",
                "example": "num_of_transport = DEN"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much transports than the specified country.",
                "scope": "Country",
                "example": "num_of_transport = DEN"
            }
        ],
        "macro": []
    },
    "num_of_trusted_allies": {
        "id": "num_of_trusted_allies",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X allies with 100 trust.",
                "scope": "Country",
                "example": "num_of_trusted_allies = 3"
            }
        ],
        "macro": []
    },
    "num_of_unions": {
        "id": "num_of_unions",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X personal unions.",
                "scope": "Country",
                "example": "num_of_unions = 3"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much personal unions than the specified country. Note: this no longer works. personal_union = x is the new format, e.g. personal_union = 2.",
                "scope": "Country",
                "example": "num_of_unions = BUR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much personal unions than the specified country. Note: this no longer works. personal_union = x is the new format, e.g. personal_union = 2.",
                "scope": "Country",
                "example": "num_of_unions = BUR"
            }
        ],
        "macro": []
    },
    "num_of_units_in_province": {
        "id": "num_of_units_in_province",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the specified country has at least X units of the specified type in the province. (type and who are not needed, if not included will default to all.)",
                "scope": "Province",
                "example": "num_of_units_in_province = {\n    who =\n    type =\n    amount =\n}"
            }
        ],
        "macro": []
    },
    "num_of_unlocked_cults": {
        "id": "num_of_unlocked_cults",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has unlocked at least X cults.",
                "scope": "Country",
                "example": "num_of_unlocked_cults = 13"
            }
        ],
        "macro": []
    },
    "num_of_war_reparations": {
        "id": "num_of_war_reparations",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country receives war reparations from at least X countries.",
                "scope": "Country",
                "example": "num_of_war_reparations = 4"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country receives war reparations from at least as much countries than the specified country.",
                "scope": "Country",
                "example": "num_of_war_reparations = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country receives war reparations from at least as much countries than the specified country.",
                "scope": "Country",
                "example": "num_of_war_reparations = ROOT"
            }
        ],
        "macro": []
    },
    "num_ships_privateering": {
        "id": "num_ships_privateering",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if country has at least X ships privateering.",
                "scope": "Country",
                "example": "num_ships_privateering = 20"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much ships privateering than the specified country.",
                "scope": "Country",
                "example": "num_ships_privateering = HSA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much ships privateering than the specified country.",
                "scope": "Country",
                "example": "num_ships_privateering = HSA"
            }
        ],
        "macro": []
    },
    "offensive_war_with": {
        "id": "offensive_war_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is in an offensive war with country X.",
                "scope": "Country",
                "example": "offensive_war_with = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is in an offensive war with country X.",
                "scope": "Country",
                "example": "offensive_war_with = ROOT"
            }
        ],
        "macro": []
    },
    "overextension_percentage": {
        "id": "overextension_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if country has at least X% overextension.",
                "scope": "Country",
                "example": "overextension_percentage = 0.75"
            }
        ],
        "macro": []
    },
    "overlord_of": {
        "id": "overlord_of",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is the overlord of X.",
                "scope": "Country",
                "example": "overlord_of = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is the overlord of X.",
                "scope": "Country",
                "example": "overlord_of = FRA"
            }
        ],
        "macro": []
    },
    "overseas_provinces_percentage": {
        "id": "overseas_provinces_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has X percentage of overseas provinces.",
                "scope": "Country",
                "example": "overseas_provinces_percentage = 0.05"
            }
        ],
        "macro": []
    },
    "owned_by": {
        "id": "owned_by",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the province is owned by the country X.",
                "scope": "Province",
                "example": "owned_by = TUR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province is owned by the country X.",
                "scope": "Province",
                "example": "owned_by = TUR"
            }
        ],
        "macro": []
    },
    "owns": {
        "id": "owns",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true if the country owns the specified province.",
                "scope": "Country",
                "example": "owns = 236"
            }
        ],
        "macro": []
    },
    "owns_all_provinces": {
        "id": "owns_all_provinces",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country or its non-tributary subjects own all provinces with the specified conditions.",
                "scope": "Country",
                "example": "owns_all_provinces = {\n continent = asia\n has_terrain = grasslands\n}"
            }
        ],
        "macro": []
    },
    "owns_core_province": {
        "id": "owns_core_province",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true if the country owns and has a core on the specified province.",
                "scope": "Country",
                "example": "owns_core_province = 217"
            }
        ],
        "macro": []
    },
    "owns_or_non_sovereign_subject_of": {
        "id": "owns_or_non_sovereign_subject_of",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true, if the country or a subject that is not categorized as \"sovereign\" (e.g. tributary states are excluded) owns the specified province.",
                "scope": "Country",
                "example": "owns_or_non_sovereign_subject_of = 151"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country or a subject that is not categorized as \"sovereign\" (e.g. tributary states are excluded) owns the specified province.",
                "scope": "Country",
                "example": "owns_or_non_sovereign_subject_of = 151"
            }
        ],
        "macro": []
    },
    "owns_or_subject_of": {
        "id": "owns_or_subject_of",
        "value_types": [
            {
                "type": "ProvinceId",
                "description": "Returns true, if the country or a subject owns the specified province.",
                "scope": "Country",
                "example": "owns_or_subject_of = 151"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country or a subject owns the specified province.",
                "scope": "Country",
                "example": "owns_or_subject_of = 151"
            }
        ],
        "macro": []
    },
    "papacy_active": {
        "id": "papacy_active",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the papacy is active.",
                "scope": "Anywhere",
                "example": "papacy_active = yes"
            }
        ],
        "macro": []
    },
    "papal_influence": {
        "id": "papal_influence",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country's papal influence is at least X.",
                "scope": "Country",
                "example": "papal_influence = 100"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much papal influence as the specified country.",
                "scope": "Country",
                "example": "papal_influence = KID"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much papal influence as the specified country.",
                "scope": "Country",
                "example": "papal_influence = KID"
            }
        ],
        "macro": []
    },
    "patriarch_authority": {
        "id": "patriarch_authority",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country's patriarch authority is at least X.",
                "scope": "Country",
                "example": "patriarch_authority = 0.75"
            }
        ],
        "macro": []
    },
    "percentage_backing_issue": {
        "id": "percentage_backing_issue",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if at least the Xth part of the seats in the parliament is backing for the current issue.",
                "scope": "Country",
                "example": "percentage_backing_issue = 0.5"
            }
        ],
        "macro": []
    },
    "personality": {
        "id": "personality",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has a ruler which personality is X. Is limited to ai_personalities listed in base game file 'common/ai_personalities/00_ai_personalities.txt'. For ruler personality, use ruler_has_personality",
                "scope": "Country",
                "example": "personality = ai_militarist"
            }
        ],
        "macro": []
    },
    "piety": {
        "id": "piety",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country's piety is at least X.",
                "scope": "Country",
                "example": "piety = -0.75"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much piety as the specified country.",
                "scope": "Country",
                "example": "piety = MOR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much piety as the specified country.",
                "scope": "Country",
                "example": "piety = MOR"
            }
        ],
        "macro": []
    },
    "preferred_emperor": {
        "id": "preferred_emperor",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if an elector has the country X is the preferred emperor.",
                "scope": "Country (Elector)",
                "example": "preferred_emperor = HAB"
            },
            {
                "type": "Scope",
                "description": "Returns true if an elector has the country X is the preferred emperor.",
                "scope": "Country (Elector)",
                "example": "preferred_emperor = HAB"
            }
        ],
        "macro": []
    },
    "prestige": {
        "id": "prestige",
        "value_types": [
            {
                "type": "Integer",
                "description": "Return true if the country has a prestige of at least X.",
                "scope": "Country",
                "example": "prestige = 99"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much prestige as the specified country.",
                "scope": "Country",
                "example": "prestige = ADA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much prestige as the specified country.",
                "scope": "Country",
                "example": "prestige = ADA"
            }
        ],
        "macro": []
    },
    "previous_owner": {
        "id": "previous_owner",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the previous owner of the province was X.",
                "scope": "Province",
                "example": "previous_owner = HUN"
            },
            {
                "type": "Scope",
                "description": "Returns true if the previous owner of the province was X.",
                "scope": "Province",
                "example": "previous_owner = HUN"
            }
        ],
        "macro": []
    },
    "power_projection": {
        "id": "power_projection",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if country has a Power_projection of at least X. Appeared in 1.30",
                "scope": "Country",
                "example": "power_projection = 90"
            }
        ],
        "macro": []
    },
    "primary_culture": {
        "id": "primary_culture",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country's primary culture is X.",
                "scope": "Country",
                "example": "primary_culture = dutch"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country's primary culture is X.",
                "scope": "Country",
                "example": "primary_culture = dutch"
            }
        ],
        "macro": []
    },
    "primitives": {
        "id": "primitives",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country is primitive.",
                "scope": "Country",
                "example": "primitives = yes"
            }
        ],
        "macro": []
    },
    "privateer_power": {
        "id": "privateer_power",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has at least X trade power from privateering in the trade node.",
                "scope": "Province\n(Trade node)",
                "example": "1744 = { #Antwerpen\n privateer_power = {\n  country = FROM\n  share = 25\n }\n}"
            }
        ],
        "macro": []
    },
    "production_efficiency": {
        "id": "production_efficiency",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has a production efficiency of at least X.",
                "scope": "Country",
                "example": "production_efficiency = 0.10"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has an at least as high production efficiency as the specified country.",
                "scope": "Country",
                "example": "production_efficiency = AAC"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has an at least as high production efficiency as the specified country.",
                "scope": "Country",
                "example": "production_efficiency = AAC"
            }
        ],
        "macro": []
    },
    "production_income_percentage": {
        "id": "production_income_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of production income to total income is at least X.",
                "scope": "Country",
                "example": "production_income_percentage = 0.10"
            }
        ],
        "macro": []
    },
    "production_leader": {
        "id": "production_leader",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country is the production leader of the trade good X.",
                "scope": "Country",
                "example": "production_leader = {\n trade_goods = coffee\n}"
            }
        ],
        "macro": []
    },
    "province_distance": {
        "id": "province_distance",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true, if the distance between specified provinces is at least X.",
                "scope": "Province",
                "example": "any_owned_province = {\n province_distance = {\n  who = 151\n  distance = 50\n }\n}"
            }
        ],
        "macro": []
    },
    "province_id": {
        "id": "province_id",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the province has the ID X.",
                "scope": "Province",
                "example": "province_id = 1"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province has the ID X.",
                "scope": "Province",
                "example": "province_id = 1"
            }
        ],
        "macro": []
    },
    "province_is_on_an_island": {
        "id": "province_is_on_an_island",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the province is on an island.",
                "scope": "Province",
                "example": "province_is_on_an_island = yes"
            }
        ],
        "macro": []
    },
    "province_group": {
        "id": "province_group",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province belongs to the specified province group.",
                "scope": "Province",
                "example": "province_group = my_province_group"
            }
        ],
        "macro": []
    },
    "province_trade_power": {
        "id": "province_trade_power",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if trade power generated by the province is at least X.",
                "scope": "Province",
                "example": "province_trade_power = 5"
            }
        ],
        "macro": []
    },
    "provinces_on_capital_continent_of": {
        "id": "provinces_on_capital_continent_of",
        "value_types": [
            {
                "type": "Scope",
                "description": "Returns true if the country has a province on the continent with the capital of the specified country.",
                "scope": "Country",
                "example": "provinces_on_capital_continent_of = ROOT"
            }
        ],
        "macro": []
    },
    "pure_unrest": {
        "id": "pure_unrest",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the province has a base unrest of at least X.",
                "scope": "Province",
                "example": "pure_unrest = 2"
            }
        ],
        "macro": []
    },
    "range": {
        "id": "range",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the province is within the range of the specified country.",
                "scope": "Province",
                "example": "range = TUR"
            },
            {
                "type": "Scope",
                "description": "Returns true if the province is within the range of the specified country.",
                "scope": "Province",
                "example": "range = TUR"
            }
        ],
        "macro": []
    },
    "real_day_of_year": {
        "id": "real_day_of_year",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if today is X. Refers to the actual real day (probably takes system time).",
                "scope": "Anywhere",
                "example": "[example needed]"
            }
        ],
        "macro": []
    },
    "real_month_of_year": {
        "id": "real_month_of_year",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the month of the year in reality is at least X (January \u2259 0)",
                "scope": "Anywhere",
                "example": "real_month_of_year = 6 # Mai"
            }
        ],
        "macro": []
    },
    "reform_desire": {
        "id": "reform_desire",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the reform desire is at least X%.",
                "scope": "Anywhere",
                "example": "reform_desire = 0.95"
            }
        ],
        "macro": []
    },
    "region": {
        "id": "region",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province is part of the region X.",
                "scope": "Province",
                "example": "region = west_india_region"
            }
        ],
        "macro": []
    },
    "religion": {
        "id": "religion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country/province has religion X.",
                "scope": "Country\nProvince",
                "example": "religion = catholic"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country/province has religion X.",
                "scope": "Country\nProvince",
                "example": "religion = catholic"
            }
        ],
        "macro": []
    },
    "religion_group": {
        "id": "religion_group",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country/province has a religion of the specified religious group.",
                "scope": "Country\nprovince",
                "example": "religion_group = christian"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country/province has a religion of the specified religious group.",
                "scope": "Country\nprovince",
                "example": "religion_group = christian"
            }
        ],
        "macro": []
    },
    "religion_years": {
        "id": "religion_years",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the specified religion is enabled for at least X years.",
                "scope": "Anywhere",
                "example": "religion_years = { confucianism = 100 }"
            }
        ],
        "macro": []
    },
    "religious_school": {
        "id": "religious_school",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true, if the country has the specified religious school.",
                "scope": "Country",
                "example": "religious_school = {\n group = muslim\n school = hanbali_school\n}"
            }
        ],
        "macro": []
    },
    "religious_unity": {
        "id": "religious_unity",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country's religious unity is at least X.",
                "scope": "Country",
                "example": "religious_unity = 0.99"
            }
        ],
        "macro": []
    },
    "republican_tradition": {
        "id": "republican_tradition",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if country's republican tradition is at least X.",
                "scope": "Country",
                "example": "republican_tradition = 90"
            }
        ],
        "macro": []
    },
    "revanchism": {
        "id": "revanchism",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if country's revanchism is at least X.",
                "scope": "Country",
                "example": "revanchism = 10"
            }
        ],
        "macro": []
    },
    "reverse_has_opinion": {
        "id": "reverse_has_opinion",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country specified by who has at least value opinion of the country.",
                "scope": "Country",
                "example": "reverse_has_opinion = {\n who = DAN\n value = 80\n}"
            }
        ],
        "macro": []
    },
    "reverse_has_opinion_modifier": {
        "id": "reverse_has_opinion_modifier",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country specified by who has the opinion modifier modifier towards the country.\nCan also specify a value of the modifier (but it is not displayed).",
                "scope": "Country",
                "example": "reverse_has_opinion_modifier = {\n who = ROOT\n modifier = opinion_spurned_pu\n}"
            }
        ],
        "macro": []
    },
    "revolt_percentage": {
        "id": "revolt_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if at least the Xth part of the provinces of the country have revolts.",
                "scope": "Country",
                "example": "revolt_percentage = 0.1"
            }
        ],
        "macro": []
    },
    "revolution_target_exists": {
        "id": "revolution_target_exists",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if there is a revolutionary target in the world.",
                "scope": "",
                "example": "revolution_target_exists = yes"
            }
        ],
        "macro": []
    },
    "ruler_age": {
        "id": "ruler_age",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a ruler that is at least X years old.",
                "scope": "Country",
                "example": "ruler_age = 40"
            }
        ],
        "macro": []
    },
    "ruler_consort_marriage_length": {
        "id": "ruler_consort_marriage_length",
        "value_types": [
            {
                "type": "Integer",
                "description": "[needs description]",
                "scope": "Country",
                "example": "ruler_consort_marriage_length = 10"
            }
        ],
        "macro": []
    },
    "ruler_culture": {
        "id": "ruler_culture",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country's ruler has the specified culture. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "ruler_culture = prussian"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country's ruler has the specified culture. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "ruler_culture = prussian"
            }
        ],
        "macro": []
    },
    "ruler_has_personality": {
        "id": "ruler_has_personality",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country\u2019s ruler has the specified personality.",
                "scope": "Country",
                "example": "ruler_has_personality = malevolent_personality"
            }
        ],
        "macro": []
    },
    "ruler_is_foreigner": {
        "id": "ruler_is_foreigner",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country has foreign ruler.",
                "scope": "Country",
                "example": "ruler_is_foreigner = no"
            }
        ],
        "macro": []
    },
    "ruler_religion": {
        "id": "ruler_religion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true, if the country's ruler has the specified religion. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "ruler_religion = catholic"
            },
            {
                "type": "Scope",
                "description": "Returns true, if the country's ruler has the specified religion. Can utilise Event Scope Values.",
                "scope": "Country",
                "example": "ruler_religion = catholic"
            }
        ],
        "macro": []
    },
    "sailors": {
        "id": "sailors",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X sailors.",
                "scope": "Country",
                "example": "sailors = 2500"
            }
        ],
        "macro": []
    },
    "sailors_percentage": {
        "id": "sailors_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has a sailor level of at least X%.",
                "scope": "Country",
                "example": "sailors_percentage = 0.50"
            }
        ],
        "macro": []
    },
    "max_sailors[3]": {
        "id": "max_sailors[3]",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has at least X maximum sailors.",
                "scope": "Country",
                "example": "max_sailors = 5000"
            }
        ],
        "macro": []
    },
    "same_continent": {
        "id": "same_continent",
        "value_types": [
            {
                "type": "Capital",
                "description": "Returns true, if specified provinces are on the same continent. If used in country scope, capitals are checked.",
                "scope": "Country, Province",
                "example": "FRA = {\n same_continent = ROOT\n}\nany_owned_province = {\n same_continent = CAPITAL\n}"
            },
            {
                "type": "ProvinceScope",
                "description": "Returns true, if specified provinces are on the same continent. If used in country scope, capitals are checked.",
                "scope": "Country, Province",
                "example": "FRA = {\n same_continent = ROOT\n}\nany_owned_province = {\n same_continent = CAPITAL\n}"
            }
        ],
        "macro": []
    },
    "secondary_religion": {
        "id": "secondary_religion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true the secondary religion of the country is X.",
                "scope": "Country",
                "example": "secondary_religion = ibadi"
            }
        ],
        "macro": []
    },
    "senior_union_with": {
        "id": "senior_union_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is the senior partner in a personal union over country X.",
                "scope": "Country",
                "example": "senior_union_with = HAB"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is the senior partner in a personal union over country X.",
                "scope": "Country",
                "example": "senior_union_with = HAB"
            }
        ],
        "macro": []
    },
    "sieged_by": {
        "id": "sieged_by",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the province is being besieged by country X.",
                "scope": "Province",
                "example": "sieged_by = ROOT"
            },
            {
                "type": "Scopes",
                "description": "Returns true if the province is being besieged by country X.",
                "scope": "Province",
                "example": "sieged_by = ROOT"
            }
        ],
        "macro": []
    },
    "splendor": {
        "id": "splendor",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has at least X splendor.",
                "scope": "Country",
                "example": "splendor = 800"
            }
        ],
        "macro": []
    },
    "stability": {
        "id": "stability",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a stability of at least X.",
                "scope": "Country",
                "example": "stability = 1"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much stability than the specified country.",
                "scope": "Country",
                "example": "stability = HAB"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much stability than the specified country.",
                "scope": "Country",
                "example": "stability = HAB"
            }
        ],
        "macro": []
    },
    "start_date": {
        "id": "start_date",
        "value_types": [
            {
                "type": "Date",
                "description": "Returns true if the start date of the campaign is X.",
                "scope": "Anywhere",
                "example": "start_date = 1776.7.4"
            }
        ],
        "macro": []
    },
    "started_in": {
        "id": "started_in",
        "value_types": [
            {
                "type": "Date",
                "description": "Returns true if the start date of the campaign is X or after.",
                "scope": "Anywhere",
                "example": "started_in = 1776.7.4"
            }
        ],
        "macro": []
    },
    "statists_vs_orangists": {
        "id": "statists_vs_orangists",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if Statists vs Orangists is at least X.",
                "scope": "Country",
                "example": "statists_vs_orangists = 0.9"
            }
        ],
        "macro": []
    },
    "subsidised_percent_amount": {
        "id": "subsidised_percent_amount",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country receives subsidies of at least X% of its monthly income.",
                "scope": "Country",
                "example": "subsidised_percent_amount = 0.5"
            }
        ],
        "macro": []
    },
    "succession_claim": {
        "id": "succession_claim",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country has claimed the throne of the country X.",
                "scope": "Country",
                "example": "succession_claim = FROM"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has claimed the throne of the country X.",
                "scope": "Country",
                "example": "succession_claim = FROM"
            }
        ],
        "macro": []
    },
    "superregion": {
        "id": "superregion",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province belongs to the superregion X.",
                "scope": "Province",
                "example": "superregion = east_indies_superregion"
            }
        ],
        "macro": []
    },
    "tag": {
        "id": "tag",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is the specified country.",
                "scope": "Country",
                "example": "tag = HAB"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is the specified country.",
                "scope": "Country",
                "example": "tag = HAB"
            }
        ],
        "macro": []
    },
    "tariff_value": {
        "id": "tariff_value",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the colonial nation pays at least X% tariffs.",
                "scope": "Country",
                "example": "tariff_value = 0.25"
            }
        ],
        "macro": []
    },
    "tax_income_percentage": {
        "id": "tax_income_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of tax income to total income is at least X.",
                "scope": "Country",
                "example": "tax_income_percentage = 0.2"
            }
        ],
        "macro": []
    },
    "tech_difference": {
        "id": "tech_difference",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the scoped country is at least X technologies ahead (compared to the country).",
                "scope": "Country",
                "example": "any_neighbor_country = {\n tech_difference = 3\n} "
            }
        ],
        "macro": []
    },
    "technology_group": {
        "id": "technology_group",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has the technology group X.",
                "scope": "Country",
                "example": "technology_group = western"
            },
            {
                "type": "Scope",
                "description": "Returns true if the countries have the same technology group.",
                "scope": "Country",
                "example": "technology_group = PREV"
            }
        ],
        "macro": []
    },
    "tolerance_to_this": {
        "id": "tolerance_to_this",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a tolerance of at least X towards the religion of the country or scoped province.",
                "scope": "Country Province",
                "example": "tolerance_to_this = 0"
            }
        ],
        "macro": []
    },
    "total_base_tax": {
        "id": "total_base_tax",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the base tax of the country's provinces totals at least X.",
                "scope": "Country",
                "example": "total_base_tax = 75"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much total base tax as the specified country.",
                "scope": "Country",
                "example": "total_base_tax = MNG"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much total base tax as the specified country.",
                "scope": "Country",
                "example": "total_base_tax = MNG"
            }
        ],
        "macro": []
    },
    "total_development": {
        "id": "total_development",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a total development of at least X.",
                "scope": "Country",
                "example": "total_development = 200"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has more total development than the specified country.",
                "scope": "Country",
                "example": "total_development = HUN"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has more total development than the specified country.",
                "scope": "Country",
                "example": "total_development = HUN"
            }
        ],
        "macro": []
    },
    "total_number_of_cardinals": {
        "id": "total_number_of_cardinals",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the total number of cardinals is at least X.",
                "scope": "Anywhere",
                "example": "total_number_of_cardinals = 49"
            }
        ],
        "macro": []
    },
    "trade_league_embargoed_by": {
        "id": "trade_league_embargoed_by",
        "value_types": [
            {
                "type": "Tag",
                "description": "[description needed]",
                "scope": "Country",
                "example": "trade_league_embargoed_by = FROM"
            },
            {
                "type": "Scope",
                "description": "[description needed]",
                "scope": "Country",
                "example": "trade_league_embargoed_by = FROM"
            }
        ],
        "macro": []
    },
    "transports_in_province": {
        "id": "transports_in_province",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X transports in the province.",
                "scope": "Province",
                "example": "transports_in_province = 10"
            },
            {
                "type": "Tag",
                "description": "Returns true if there are transports from the specified country in the province.",
                "scope": "Province",
                "example": "transports_in_province = TER"
            },
            {
                "type": "Scope",
                "description": "Returns true if there are transports from the specified country in the province.",
                "scope": "Province",
                "example": "transports_in_province = TER"
            }
        ],
        "macro": []
    },
    "trade_company_region": {
        "id": "trade_company_region",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province is in the trade company region.",
                "scope": "Province",
                "example": "trade_company_region = trade_company_moluccas"
            }
        ],
        "macro": []
    },
    "trade_company_size": {
        "id": "trade_company_size",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the trade company has at least X provinces.",
                "scope": "Province",
                "example": "trade_company_size = 5"
            }
        ],
        "macro": []
    },
    "trade_efficiency": {
        "id": "trade_efficiency",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has a trade efficiency over X.",
                "scope": "Country",
                "example": "trade_efficiency = 0.50"
            }
        ],
        "macro": []
    },
    "trade_embargoing": {
        "id": "trade_embargoing",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is embargoing country X.",
                "scope": "Country",
                "example": "trade_embargoing = HAB"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is embargoing country X.",
                "scope": "Country",
                "example": "trade_embargoing = HAB"
            }
        ],
        "macro": []
    },
    "trade_embargo_by": {
        "id": "trade_embargo_by",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if country X is embargoing the country.",
                "scope": "Country",
                "example": "trade_embargo_by = HAB"
            },
            {
                "type": "Scope",
                "description": "Returns true if country X is embargoing the country.",
                "scope": "Country",
                "example": "trade_embargo_by = HAB"
            }
        ],
        "macro": []
    },
    "trade_goods": {
        "id": "trade_goods",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the province is producing the trade good X.",
                "scope": "Province",
                "example": "trade_goods = fur"
            }
        ],
        "macro": []
    },
    "trade_income_percentage": {
        "id": "trade_income_percentage",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of trade income to total income is at least X.",
                "scope": "Country",
                "example": "trade_income_percentage = 0.10"
            }
        ],
        "macro": []
    },
    "trade_range": {
        "id": "trade_range",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the trade node is within the trade range of the specified country.",
                "scope": "Province\n(Trade node)",
                "example": "trade_range = ENG"
            },
            {
                "type": "Scope",
                "description": "Returns true if the trade node is within the trade range of the specified country.",
                "scope": "Province\n(Trade node)",
                "example": "trade_range = ENG"
            }
        ],
        "macro": []
    },
    "trade_share": {
        "id": "trade_share",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country controls at least X% of the trade in the specified trade node.",
                "scope": "Province\n(Trade node)",
                "example": "1744 = { #Antwerpen\n trade_share = {\n  country = NED\n  share = 25\n }\n}"
            }
        ],
        "macro": []
    },
    "trading_bonus": {
        "id": "trading_bonus",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has the \u2018trading in\u2019 bonus of the specified trade good.",
                "scope": "Country",
                "example": "trading_bonus = {\n trade_goods = coffee\n value = yes\n}"
            }
        ],
        "macro": []
    },
    "trading_part": {
        "id": "trading_part",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country has access to X% of the world market of the specified trade good.",
                "scope": "Country",
                "example": "trading_part = {\n trade_goods = cocoa\n value = 0.05\n}"
            }
        ],
        "macro": []
    },
    "trading_policy_in_node": {
        "id": "trading_policy_in_node",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true, if the country has the specified trading policy in the specified trade node. Can also use \"policy = any\".",
                "scope": "Country",
                "example": "any_active_trade_node = {\n ROOT = {\n  trading_policy_in_node = {\n   node = PREV\n   policy = propagate_religion\n  }\n }\n}"
            }
        ],
        "macro": []
    },
    "transport_fraction": {
        "id": "transport_fraction",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the ratio of the transport fraction to the navy size of the country is at least X.",
                "scope": "Country",
                "example": "transport_fraction = 0.55"
            }
        ],
        "macro": []
    },
    "treasury": {
        "id": "treasury",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if country's treasury contains at least X ducats.",
                "scope": "Country",
                "example": "treasury = 100"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much ducats in its treasury as the specified country.",
                "scope": "Country",
                "example": "treasury = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much ducats in its treasury as the specified country.",
                "scope": "Country",
                "example": "treasury = ROOT"
            }
        ],
        "macro": []
    },
    "tribal_allegiance": {
        "id": "tribal_allegiance",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true, if the country has a tribal allegiance of at least X.",
                "scope": "Country",
                "example": "tribal_allegiance = 10"
            }
        ],
        "macro": []
    },
    "truce_with": {
        "id": "truce_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country has a truce with X.",
                "scope": "Country",
                "example": "truce_with = FRA"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has a truce with X.",
                "scope": "Country",
                "example": "truce_with = FRA"
            }
        ],
        "macro": []
    },
    "trust": {
        "id": "trust",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the current scope has a trust level of at least X with the specified tag.",
                "scope": "Country",
                "example": "trust = { who = FRA value = 50 }"
            },
            {
                "type": "Scope",
                "description": "Returns true if the current scope has a trust level of at least X with the specified tag.",
                "scope": "Country",
                "example": "trust = { who = FRA value = 50 }"
            }
        ],
        "macro": []
    },
    "unit_has_leader": {
        "id": "unit_has_leader",
        "value_types": [
            {
                "type": "Yes",
                "description": "Returns true if any unit is in the province has a leader.\nWarning: Works only with 'yes'.",
                "scope": "Province",
                "example": "unit_has_leader = yes"
            }
        ],
        "macro": []
    },
    "unit_in_battle": {
        "id": "unit_in_battle",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if any unit in the province is in a battle.",
                "scope": "Province",
                "example": "unit_in_battle = no"
            }
        ],
        "macro": []
    },
    "unit_in_siege": {
        "id": "unit_in_siege",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if any unit in the province is in a siege.",
                "scope": "Province",
                "example": "unit_in_siege = yes"
            }
        ],
        "macro": []
    },
    "units_in_province": {
        "id": "units_in_province",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if there are at least X units in the province.",
                "scope": "Province",
                "example": "units_in_province = 1"
            },
            {
                "type": "Tag",
                "description": "Returns true if the specified country has units in the province.",
                "scope": "Province",
                "example": "units_in_province = RUS"
            },
            {
                "type": "Scope",
                "description": "Returns true if the specified country has units in the province.",
                "scope": "Province",
                "example": "units_in_province = RUS"
            }
        ],
        "macro": []
    },
    "unit_type": {
        "id": "unit_type",
        "value_types": [
            {
                "type": "Identifier",
                "description": "Returns true if the country has units of type X.",
                "scope": "Country",
                "example": "unit_type = sub_saharan"
            }
        ],
        "macro": []
    },
    "unrest": {
        "id": "unrest",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the unrest in the province is at least X.",
                "scope": "Province",
                "example": "unrest = 3"
            }
        ],
        "macro": []
    },
    "uses_authority": {
        "id": "uses_authority",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses authority mechanics.",
                "scope": "Country",
                "example": "uses_authority = yes"
            }
        ],
        "macro": []
    },
    "uses_church_aspects": {
        "id": "uses_church_aspects",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses church aspects mechanics.",
                "scope": "Country",
                "example": "uses_church_aspects = yes"
            }
        ],
        "macro": []
    },
    "uses_blessings": {
        "id": "uses_blessings",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses blessings mechanics.",
                "scope": "Country",
                "example": "uses_blessings = yes"
            }
        ],
        "macro": []
    },
    "uses_cults": {
        "id": "uses_cults",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses cults mechanics.",
                "scope": "Country",
                "example": "uses_cults = yes"
            }
        ],
        "macro": []
    },
    "uses_devotion": {
        "id": "uses_devotion",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true, if the country uses devotion instead of legitimacy.",
                "scope": "Country",
                "example": "uses_devotion = yes"
            }
        ],
        "macro": []
    },
    "uses_doom": {
        "id": "uses_doom",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses doom mechanics.",
                "scope": "Country",
                "example": "uses_doom = yes"
            }
        ],
        "macro": []
    },
    "uses_fervor": {
        "id": "uses_fervor",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses fervor mechanics.",
                "scope": "Country",
                "example": "uses_fervor = yes"
            }
        ],
        "macro": []
    },
    "uses_isolationism": {
        "id": "uses_isolationism",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true, if the country uses the isolationism mechanic.",
                "scope": "Country",
                "example": "uses_isolationism = yes"
            }
        ],
        "macro": []
    },
    "uses_karma": {
        "id": "uses_karma",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses karma mechanics.",
                "scope": "Country",
                "example": "uses_karma = yes"
            }
        ],
        "macro": []
    },
    "uses_papacy": {
        "id": "uses_papacy",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses papacy mechanics.",
                "scope": "Country",
                "example": "uses_papacy = yes"
            }
        ],
        "macro": []
    },
    "uses_patriarch_authority": {
        "id": "uses_patriarch_authority",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses patriarch authority mechanics.",
                "scope": "Country",
                "example": "uses_patriarch_authority = yes"
            }
        ],
        "macro": []
    },
    "uses_personal_deities": {
        "id": "uses_personal_deities",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses personal deities mechanics.",
                "scope": "Country",
                "example": "uses_personal_deities = yes"
            }
        ],
        "macro": []
    },
    "uses_piety": {
        "id": "uses_piety",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses piety mechanics.",
                "scope": "Country",
                "example": "uses_piety = yes"
            }
        ],
        "macro": []
    },
    "uses_religious_icons": {
        "id": "uses_religious_icons",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true, if the country uses religious icons.",
                "scope": "Country",
                "example": "uses_religious_icons = yes"
            }
        ],
        "macro": []
    },
    "uses_syncretic_faiths": {
        "id": "uses_syncretic_faiths",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country uses syncretic faiths mechanics.",
                "scope": "Country",
                "example": "uses_syncretic_faiths = yes"
            }
        ],
        "macro": []
    },
    "variable_arithmetic_trigger": {
        "id": "variable_arithmetic_trigger",
        "value_types": [
            {
                "type": "Clause",
                "description": "Can use variable effects and triggers to compare or change and compare modifier and trigger values. \"variable_arithmetic_trigger\" sections can include more \"variable_arithmetic_trigger\" sections. This has to be done for effects such as \"change_variable\" or effects of \"if\" sections inside the \"variable_arithmetic_trigger\", since the game may crash otherwise.",
                "scope": "Anywhere",
                "example": "variable_arithmetic_trigger = {\n custom_tooltip = from_total_development_is_10_times_bigger_than_ours\n export_to_variable = {\n  which = our_total_development\n  value = trigger_value:total_development\n }\n export_to_variable = {\n  which = from_total_development\n  value = trigger_value:total_development\n  who = FROM\n }\n multiply_variable = { which = from_total_development value = 10 }\n \n check_variable = { which = from_total_development which = our_total_development }\n}"
            }
        ],
        "macro": []
    },
    "vassal_of": {
        "id": "vassal_of",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is a vassal of country X.",
                "scope": "Country",
                "example": "vassal_of = ROOT"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is a vassal of country X.",
                "scope": "Country",
                "example": "vassal_of = ROOT"
            }
        ],
        "macro": []
    },
    "war_exhaustion": {
        "id": "war_exhaustion",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the country has a war exhaustion of at least X.",
                "scope": "Country",
                "example": "war_exhaustion = 8"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country has at least as much war exhaustion as the specified country.",
                "scope": "Country",
                "example": "war_exhaustion = NPL"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country has at least as much war exhaustion as the specified country.",
                "scope": "Country",
                "example": "war_exhaustion = NPL"
            }
        ],
        "macro": []
    },
    "war_score": {
        "id": "war_score",
        "value_types": [
            {
                "type": "Integer",
                "description": "Returns true if the coutry has a warscore of at least X%.",
                "scope": "Country",
                "example": "war_score = 100"
            }
        ],
        "macro": []
    },
    "war_score_against": {
        "id": "war_score_against",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the coutry has a warscore of at least X against the specified country.",
                "scope": "Country",
                "example": "war_score_against = {\n who = INC\n value = 75\n}"
            }
        ],
        "macro": []
    },
    "war_with": {
        "id": "war_with",
        "value_types": [
            {
                "type": "Tag",
                "description": "Returns true if the country is at war with country X.",
                "scope": "Country",
                "example": "war_with = INC"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country is at war with country X.",
                "scope": "Country",
                "example": "war_with = INC"
            }
        ],
        "macro": []
    },
    "was_player": {
        "id": "was_player",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the country was controlled by a human player.",
                "scope": "Country",
                "example": "was_player = no"
            }
        ],
        "macro": []
    },
    "was_tag": {
        "id": "was_tag",
        "value_types": [
            {
                "type": "Country",
                "description": "Returns true if the country was a particular tag.",
                "scope": "Country",
                "example": "was_tag = MUG"
            }
        ],
        "macro": []
    },
    "will_back_next_reform": {
        "id": "will_back_next_reform",
        "value_types": [
            {
                "type": "Boolean",
                "description": "Returns true if the member of the HRE is backing the next imperial reform.",
                "scope": "Country",
                "example": "will_back_next_reform = yes"
            }
        ],
        "macro": []
    },
    "yearly_corruption_increase": {
        "id": "yearly_corruption_increase",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country has a yearly corruption increase of at least X.",
                "scope": "Country",
                "example": "NOT = { yearly_corruption_increase = 0.001 }"
            }
        ],
        "macro": []
    },
    "years_in_union_under": {
        "id": "years_in_union_under",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country is in a personal union under the specified country for at least X years.",
                "scope": "Country",
                "example": "years_in_union_under = {\n who = ROOT\n years = 50\n}"
            }
        ],
        "macro": []
    },
    "years_in_vassalage_under": {
        "id": "years_in_vassalage_under",
        "value_types": [
            {
                "type": "Clause",
                "description": "Returns true if the country is a vassal of the specified country for at least X years.",
                "scope": "Country",
                "example": "years_in_vassalage_under = {\n who = ROOT\n years = 10\n}"
            }
        ],
        "macro": []
    },
    "years_of_income": {
        "id": "years_of_income",
        "value_types": [
            {
                "type": "Float",
                "description": "Returns true if the country's treasury contains ducats of at least X times their yearly income.",
                "scope": "Country",
                "example": "years_of_income = 1.0"
            },
            {
                "type": "Tag",
                "description": "Returns true if the country's treasury contains ducats of at least the yearly income of the specified country.",
                "scope": "Country",
                "example": "years_of_income = SER"
            },
            {
                "type": "Scope",
                "description": "Returns true if the country's treasury contains ducats of at least the yearly income of the specified country.",
                "scope": "Country",
                "example": "years_of_income = SER"
            }
        ],
        "macro": []
    }
}